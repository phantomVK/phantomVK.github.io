---
layout:     post
title:      "Java源码系列(5) -- HashSet"
date:       2018-01-14
author:     "phantomVK"
header-img: "img/main_img.jpg"
catalog:    true
tags:
    - Java源码系列
---

## 一、类签名

```java
public class HashSet<E>
    extends AbstractSet<E>
    implements Set<E>, Cloneable, java.io.Serializable
```

UML

![HashMap_UML](/img/java/HashSet_UML.png)

## 二、数据成员

__HashSet__ 利用[HashMap](/2018/06/30/HashMap/)实现特性，通过HashMap存储哈希值去重，key对应的值非空表明key存在

```java
private transient HashMap<E,Object> map;
```

常量对象，在 __HashMap__ 的value中起占位作用，表示对应key已存在

```java
private static final Object PRESENT = new Object();
```

## 三、构造方法

构造全新 __HashMap__ 实例，集合初始化大小16，负载因子0.75

```java
public HashSet() {
    map = new HashMap<>();
}
```

利用给定集合包含的元素构造新集合，__HashMap__ 实例初始化大小16，负载因子0.75

```java
public HashSet(Collection<? extends E> c) {
    map = new HashMap<>(Math.max((int) (c.size()/.75f) + 1, 16));
    addAll(c);
}
```

指定容量值和负载因子初始化内部 __HashMap__

```java
public HashSet(int initialCapacity, float loadFactor) {
    map = new HashMap<>(initialCapacity, loadFactor);
}
```

指定容量值初始化内部 __HashMap__，负载因子默认值为0.75

```java
public HashSet(int initialCapacity) {
    map = new HashMap<>(initialCapacity);
}
```

构造函数使用 __LinkedHashMap__，构造参数名为 __dummy__ 的布尔值，用于区别上面的构造方法

```java
HashSet(int initialCapacity, float loadFactor, boolean dummy) {
    map = new LinkedHashMap<>(initialCapacity, loadFactor);
}
```

## 四、成员方法

返回一个迭代器，迭代器指示的元素没有固定顺序

```java
public Iterator<E> iterator() {
    return map.keySet().iterator();
}
```

返回集合中包含元素的数量

```java
public int size() {
    return map.size();
}
```

如果容器中没有任何元素，返回true

```java
public boolean isEmpty() {
    return map.isEmpty();
}
```

检查集合中是否包含指定元素

```java
public boolean contains(Object o) {
    return map.containsKey(o);
}
```

若集合不包含该元素e，成功插入返回true。集合中已包含指定元素，则原集合不改变并返回false

```java
public boolean add(E e) {
    return map.put(e, PRESENT)==null;
}
```

从集合中移除指定元素

```java
public boolean remove(Object o) {
    return map.remove(o)==PRESENT;
}
```

清空集合所有元素

```java
public void clear() {
    map.clear();
}
```

