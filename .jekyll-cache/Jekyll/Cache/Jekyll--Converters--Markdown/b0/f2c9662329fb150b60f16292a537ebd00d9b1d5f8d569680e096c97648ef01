I"I<p>以下示例动画持续修改 <strong>TextView</strong> 的文本数值</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">LeakActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_leak</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">a</span> <span class="p">=</span> <span class="nc">ValueAnimator</span><span class="p">.</span><span class="nf">ofInt</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1000</span><span class="p">)</span>
    <span class="n">a</span><span class="p">.</span><span class="n">duration</span> <span class="p">=</span> <span class="m">1000</span>
    <span class="n">a</span><span class="p">.</span><span class="n">repeatMode</span> <span class="p">=</span> <span class="nc">ValueAnimator</span><span class="p">.</span><span class="nc">REVERSE</span>
    <span class="n">a</span><span class="p">.</span><span class="n">repeatCount</span> <span class="p">=</span> <span class="nc">ValueAnimator</span><span class="p">.</span><span class="nc">INFINITE</span>
    <span class="n">a</span><span class="p">.</span><span class="nf">addUpdateListener</span> <span class="p">{</span> <span class="n">l</span> <span class="p">-&gt;</span> <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">l</span><span class="p">.</span><span class="n">animatedValue</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="p">}</span>
    <span class="n">a</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>直接看 <strong>ValueAnimator.cancel()</strong> 如何释放资源</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AndroidRuntimeException</span><span class="o">(</span><span class="s">"Animators may only be run on Looper threads"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 如果动画没启动，不需要取消</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mAnimationEndRequested</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 只停止正在执行的动画监听器</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">mStarted</span> <span class="o">||</span> <span class="n">mRunning</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">mListeners</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">mRunning</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If it's not yet running, then start listeners weren't called. Call them now.</span>
            <span class="n">notifyStartListeners</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimatorListener</span><span class="o">&gt;</span> <span class="n">tmpListeners</span> <span class="o">=</span>
                <span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimatorListener</span><span class="o">&gt;)</span> <span class="n">mListeners</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">AnimatorListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">tmpListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">onAnimationCancel</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 这里终止动画</span>
    <span class="n">endAnimation</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>endAnimation()</strong> 注释提到，此方法由 <strong>ValueAnimator</strong> 内部调用，结束动画时要从动画列表移除该动画</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">endAnimation</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mAnimationEndRequested</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="c1">// 移除动画回调</span>
    <span class="n">removeAnimationCallback</span><span class="o">();</span>

    <span class="n">mAnimationEndRequested</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="n">mPaused</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="kt">boolean</span> <span class="n">notify</span> <span class="o">=</span> <span class="o">(</span><span class="n">mStarted</span> <span class="o">||</span> <span class="n">mRunning</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">mListeners</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">notify</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mRunning</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// If it's not yet running, then start listeners weren't called. Call them now.</span>
        <span class="n">notifyStartListeners</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">mRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">mStarted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">mStartListenersCalled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">mLastFrameTime</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="n">mFirstFrameTime</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="n">mStartTime</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">notify</span> <span class="o">&amp;&amp;</span> <span class="n">mListeners</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimatorListener</span><span class="o">&gt;</span> <span class="n">tmpListeners</span> <span class="o">=</span>
                <span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimatorListener</span><span class="o">&gt;)</span> <span class="n">mListeners</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">numListeners</span> <span class="o">=</span> <span class="n">tmpListeners</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numListeners</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">tmpListeners</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">onAnimationEnd</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">mReversing</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// mReversing needs to be reset *after* notifying the listeners for the end callbacks.</span>
    <span class="n">mReversing</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">Trace</span><span class="o">.</span><span class="na">isTagEnabled</span><span class="o">(</span><span class="nc">Trace</span><span class="o">.</span><span class="na">TRACE_TAG_VIEW</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">Trace</span><span class="o">.</span><span class="na">asyncTraceEnd</span><span class="o">(</span><span class="nc">Trace</span><span class="o">.</span><span class="na">TRACE_TAG_VIEW</span><span class="o">,</span> <span class="n">getNameForTrace</span><span class="o">(),</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">identityHashCode</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上述方法调用以下方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeAnimationCallback</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">mSelfPulse</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">getAnimationHandler</span><span class="o">().</span><span class="na">removeCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>继续跳到这里获取单例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">AnimationHandler</span> <span class="nf">getAnimationHandler</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">AnimationHandler</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>可见 <strong>AnimationHandler</strong> 存放在 <strong>ThreadLocal</strong> 里面，就是主线程的 <strong>ThreadLocal</strong> 区域内。而 <strong>AnimationFrameCallback</strong> 保存在 <strong>AnimationHandler</strong> 中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnimationHandler</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ArrayMap</span><span class="o">&lt;</span><span class="nc">AnimationFrameCallback</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">mDelayedCallbackStartTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimationFrameCallback</span><span class="o">&gt;</span> <span class="n">mAnimationCallbacks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AnimationFrameCallback</span><span class="o">&gt;</span> <span class="n">mCommitCallbacks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">AnimationHandler</span><span class="o">&gt;</span> <span class="n">sAnimatorHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">AnimationHandler</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">sAnimatorHandler</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sAnimatorHandler</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">AnimationHandler</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sAnimatorHandler</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeCallback</span><span class="o">(</span><span class="nc">AnimationFrameCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mCommitCallbacks</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
        <span class="n">mDelayedCallbackStartTime</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">mAnimationCallbacks</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">callback</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mAnimationCallbacks</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
            <span class="n">mListDirty</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>总结内存泄漏路径：</p>

<ul>
  <li><strong>ThreadLocal</strong> 在主线程持有 <strong>AnimationHandler</strong>；</li>
  <li><strong>AnimationHandler</strong> 持有多个 <strong>AnimationFrameCallback</strong> 列表；</li>
  <li><strong>AnimationFrameCallback</strong> 接口由 <strong>ValueAnimator</strong> 类实现；</li>
  <li>创建的 <strong>ValueAnimator</strong> 实例又隐式持有 <strong>Activity</strong> 实例；</li>
  <li>所以不结束或清除 <strong>ThreadLocal</strong>，<strong>Activity</strong> 引用被 <strong>AnimationHandler</strong> 间接持有；</li>
</ul>
:ET