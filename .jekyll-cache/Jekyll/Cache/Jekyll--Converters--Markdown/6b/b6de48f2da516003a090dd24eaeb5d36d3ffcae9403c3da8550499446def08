I"Q3<h2 id="一类签名">一、类签名</h2>

<p>HandlerThread是Android提供的封装类，父类是Thread。HandlerThread实例包含一个<a href="/2016/12/03/Android_Looper/">Looper</a>并用于构建<a href="/2016/12/01/Android_Handler/">Handler</a>。由于这是一个线程类，所以必须通过Thread.start()启动线程。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HandlerThread</span> <span class="kd">extends</span> <span class="nc">Thread</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="二数据成员">二、数据成员</h2>

<p>线程优先级</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">mPriority</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>线程id</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">mTid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>线程Looper</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">Looper</span> <span class="n">mLooper</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过上述Looper构建的Handler</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="nd">@Nullable</span> <span class="nc">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="三构造方法">三、构造方法</h2>

<p>构造方法，默认线程优先级</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="n">mPriority</span> <span class="o">=</span> <span class="nc">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_DEFAULT</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>构造方法，自定义线程优先级</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">priority</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="n">mPriority</span> <span class="o">=</span> <span class="n">priority</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="四成员方法">四、成员方法</h2>

<p>此类本质是线程，必须使用Thread.start()启动。</p>

<p>当线程的Looper通过loop()方法启动后，就会在该方法内轮询获取消息。只有在Looper退出后，下一行 <strong>mTid = -1;</strong> 才会执行，重置线程id后结束run()的运行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 获取线程Tid</span>
    <span class="n">mTid</span> <span class="o">=</span> <span class="nc">Process</span><span class="o">.</span><span class="na">myTid</span><span class="o">();</span>
    
    <span class="c1">// 初始化Looper</span>
    <span class="nc">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
    
    <span class="c1">// 获取Looper</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mLooper</span> <span class="o">=</span> <span class="nc">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span>
        <span class="n">notifyAll</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="c1">// 设置线程优先级</span>
    <span class="nc">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">mPriority</span><span class="o">);</span>
    <span class="n">onLooperPrepared</span><span class="o">();</span>

    <span class="c1">// 启动Looper</span>
    <span class="nc">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
    <span class="n">mTid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>重写此方法以便在Looper开始loop前执行自定义操作</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onLooperPrepared</span><span class="o">()</span> <span class="o">{</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>获取线程中的Looper</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Looper</span> <span class="nf">getLooper</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 线程不是存活状态则返回null</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 即使thread已经启动，Looper实例也只在其创建完成后才能返回</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">mLooper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">wait</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">mLooper</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>从HandlerThread里面获取共享的Handler实例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nd">@NonNull</span>
<span class="kd">public</span> <span class="nc">Handler</span> <span class="nf">getThreadHandler</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Handler</span><span class="o">(</span><span class="n">getLooper</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">mHandler</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用Looper的退出方法quit()</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">quit</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Looper</span> <span class="n">looper</span> <span class="o">=</span> <span class="n">getLooper</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">looper</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">looper</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用Looper的安全退出方法quitSafely()</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">quitSafely</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Looper</span> <span class="n">looper</span> <span class="o">=</span> <span class="n">getLooper</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">looper</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">looper</span><span class="o">.</span><span class="na">quitSafely</span><span class="o">();</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>获取线程id，即Process.myTid()</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getThreadId</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">mTid</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET