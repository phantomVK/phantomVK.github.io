I"W<h2 id="runnable">Runnable</h2>

<p><strong>Runnable</strong> 接口由需被线程执行的类继承实现，实现类需实现接口中无参数的方法 <strong>run</strong>。</p>

<p>此接口为那些希望在激活时执行代码的对象提供公共协议。例如 <strong>Thread</strong> 实现 <strong>Runnable</strong> 接口，当 <strong>Thread</strong> 激活之后表示线程已经启动且尚未停止。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="c1">// 当对象实现Runnable接口并用于创建线程</span>
    <span class="c1">// 在线程启动时，会引起run方法在独立执行的线程中执行</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>其次，<strong>Runnable</strong> 也表明实现类在不是 <strong>Thread</strong> 的子类的情况下，也能变得活跃。实现 <strong>Runnable</strong> 接口的类不需继承 <strong>Thread</strong> ，可把本实例传递给 <strong>Thread</strong> 实例作为运行目标。在多数情况下，如果不需要重写 <strong>Thread</strong> 方法，应尽量使用 <strong>Runnable</strong>。</p>

<h2 id="callable">Callable</h2>

<p>这是返回运行结果值或抛出异常的任务。实现者需定义一个没有参数，且名为 <strong>call</strong> 的方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 计算获得结果，或在无法运行时抛出异常</span>
    <span class="c1">// V为计算后结果的类型</span>
    <span class="no">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Callable</strong> 和 <strong>Runnable</strong> 接口有点类似，均设计为让类实例运行在其他线程上。但是，<strong>Runnable</strong> 不会返回结果，且不能抛出受检异常。</p>

<p><strong>Executors</strong> 类包含一些工具方法，能把其他普通类型转换为 <strong>Callable</strong>。例如：把 <strong>Runnable</strong> 转换为 <strong>Callable</strong></p>
:ET