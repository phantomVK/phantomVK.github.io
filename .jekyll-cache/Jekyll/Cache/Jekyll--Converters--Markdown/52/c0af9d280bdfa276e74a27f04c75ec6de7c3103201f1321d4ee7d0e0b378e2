I""<h2 id="一基类">一、基类</h2>

<h4 id="rejectedexecutionhandler">RejectedExecutionHandler</h4>

<p>所有拒绝策略都需要继承此类，用于处理被 <strong>ThreadPoolExecutor</strong> 拒绝的任务</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
    
    <span class="c1">// ThreadPoolExecutor.execute拒绝执行任务后，此方法由ThreadPoolExecutor调用</span>
    <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="nc">ThreadPoolExecutor</span> <span class="n">executor</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>实现类在 <strong>java.util.concurrent</strong> 包中，源码来自 <strong>JDK11</strong></p>

<h2 id="二实现策略">二、实现策略</h2>

<p>Java预定义4种拒绝策略，定制其他策略也需实现接口 <strong>RejectedExecutionHandler</strong> 的抽象方法</p>

<p><img src="/img/java/RejectedExecutionHandlers.png" alt="RejectedExecutionHandlers" /></p>

<h4 id="21-callerrunspolicy">2.1 CallerRunsPolicy</h4>

<p>当任务添加到线程池被拒绝时，只要线程池尚在运行，该任务就会在调用者所在线程上直接执行。虽然这种策略并没有丢弃任务，但是会影响调用者线程其他功能的执行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CallerRunsPolicy</span> <span class="kd">implements</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
    <span class="c1">// 默认构造方法</span>
    <span class="kd">public</span> <span class="nf">CallerRunsPolicy</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

    <span class="c1">// 被拒绝任务直接运行</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="nc">ThreadPoolExecutor</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">.</span><span class="na">isShutdown</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">r</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="22-abortpolicy">2.2 AbortPolicy</h4>

<p>当任务添加到线程池被拒绝时抛出 <strong>RejectedExecutionException</strong> 异常。这是 <strong>ThreadPoolExecutor</strong> 和 <strong>ScheduledThreadPoolExecutor</strong> 的默认策略。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AbortPolicy</span> <span class="kd">implements</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
    <span class="c1">// 默认构造方法</span>
    <span class="kd">public</span> <span class="nf">AbortPolicy</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="nc">ThreadPoolExecutor</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RejectedExecutionException</span><span class="o">(</span><span class="s">"Task "</span> <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span>
                                             <span class="s">" rejected from "</span> <span class="o">+</span>
                                             <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="23-discardpolicy">2.3 DiscardPolicy</h4>

<p>当任务添加到线程池被拒绝时，该任务会被丢弃且不给任何提示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DiscardPolicy</span> <span class="kd">implements</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
    <span class="c1">// 默认构造方法</span>
    <span class="kd">public</span> <span class="nf">DiscardPolicy</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

    <span class="c1">// 拒绝策略收到任务r后什么都没做</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="nc">ThreadPoolExecutor</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="24-discardoldestpolicy">2.4 DiscardOldestPolicy</h4>

<p>当任务添加到线程池被拒绝时，线程池会抛弃最久尚未被处理的任务，并把刚刚被拒绝的任务加入到线程池中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DiscardOldestPolicy</span> <span class="kd">implements</span> <span class="nc">RejectedExecutionHandler</span> <span class="o">{</span>
    <span class="c1">// 默认构造方法</span>
    <span class="kd">public</span> <span class="nf">DiscardOldestPolicy</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

    <span class="c1">// 只要线程池没有关闭，最旧的任务就会被丢弃，并提交任务r</span>
    <span class="c1">// 这个最旧的任务其实就是线程池下一个等待处理的任务</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="nc">ThreadPoolExecutor</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">e</span><span class="o">.</span><span class="na">isShutdown</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">getQueue</span><span class="o">().</span><span class="na">poll</span><span class="o">();</span>
            <span class="n">e</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET