I"tW<h2 id="一介绍">一、介绍</h2>

<h4 id="11-功能">1.1 功能</h4>

<p>经过长期需求迭代、引入大量第三方代码库之后，构建的安装包包含海量方法。即便经过代码混淆，依然会在不久的将来遇到 <strong>Android64K方法数</strong> 问题。</p>

<p>官方对此这样解释：</p>

<blockquote>
  <p>Android 应用 (APK) 文件包含 <a href="https://source.android.com/devices/tech/dalvik/">Dalvik</a> Executable (DEX) 文件形式的可执行字节码文件，这些文件包含用来运行您的应用的已编译代码。Dalvik Executable 规范将可在单个 DEX 文件内引用的方法总数限制为 65,536，其中包括 Android 框架方法、库方法以及您自己的代码中的方法。在计算机科学领域内，术语<a href="https://en.wikipedia.org/wiki/Kilo-"><em>千（简称 K）</em></a>表示 1024（或 2^10）。由于 65,536 等于 64 X 1024，因此这一限制称为“64K 引用限制”。</p>
</blockquote>

<p>既然单个Dex文件不能容纳应用所有方法引用，应运而生解决方案：把多余的方法引用放到第二个、第三个等后续Dex文件中。方法引用越多，最终分包数量越多。</p>

<h4 id="12-构建">1.2 构建</h4>

<p>添加以下配置后，代码构建时自动分包：</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">android</span> <span class="o">{</span>
    <span class="n">defaultConfig</span> <span class="o">{</span>
        <span class="n">multiDexEnabled</span> <span class="kc">true</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>MultiDex</strong> 用于应用启动时加载被分割的子dex，让后续类加载能从子dex找到目标类。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">implementation</span> <span class="s2">"androidx.multidex:multidex:2.0.0"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="13-疑难">1.3 疑难</h4>

<p>当然还可能会遇到：</p>

<ul>
  <li>启动类没有分到主包引起 <strong>ClassNotFoundException</strong>；</li>
  <li>读取dex时间长导致 <strong>ANR</strong> 提示；</li>
</ul>

<p>这些问题网上很多文章都有提及，自行查找就有解决方案。更详细的说明可以参考官方文档：<a href="https://developer.android.com/studio/build/multidex?hl=zh-cn">为方法数超过 64K 的应用启用多 dex 文件</a>。</p>

<p>为提高文章阅读性和不影响理解的前提，下文移除部分日志并微调代码格式，插图可以浏览器右键打开查看。</p>

<h2 id="二集成">二、集成</h2>

<p>最简单方式是继承 <strong>MultiDexApplication</strong> 类。</p>

<p>如果不方便继承父类，可以选择在自定义的 <strong>Application.attachBaseContext(Context base)</strong> 里主动调用 <strong>MultiDex.install(this);</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiDexApplication</span> <span class="kd">extends</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">MultiDexApplication</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">attachBaseContext</span><span class="o">(</span><span class="nc">Context</span> <span class="n">base</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">attachBaseContext</span><span class="o">(</span><span class="n">base</span><span class="o">);</span>
        <span class="nc">MultiDex</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="三提取">三、提取</h2>

<h4 id="31-is_vm_multidex_capable">3.1 IS_VM_MULTIDEX_CAPABLE</h4>

<p><strong>Android4.4(API19)</strong> 获取 <strong>System.getProperty(“java.vm.version”)</strong> 结果为 <strong>1.6.0</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="no">IS_VM_MULTIDEX_CAPABLE</span> <span class="o">=</span> 
  <span class="n">isVMMultidexCapable</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"java.vm.version"</span><span class="o">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="32-install">3.2 install()</h4>

<p>上文提到的 <strong>MultiDex.install(this);</strong> 调用以下方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">install</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">IS_VM_MULTIDEX_CAPABLE</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 如果VM本身已经支持分包就不需要调用MultiDex，因为安装过程已完成相同操作</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">"MultiDex"</span><span class="o">,</span> <span class="s">"VM has multidex support, MultiDex support library is disabled."</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="no">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 最低支持API4</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"MultiDex installation failed. SDK "</span> <span class="o">+</span> <span class="no">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span>
                                   <span class="o">+</span> <span class="s">" is unsupported. Min SDK version is "</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 获取应用的信息</span>
            <span class="nc">ApplicationInfo</span> <span class="n">applicationInfo</span> <span class="o">=</span> <span class="n">getApplicationInfo</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">applicationInfo</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
          
            <span class="c1">// 开始装载操作</span>
            <span class="n">doInstallation</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> 
                           <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">applicationInfo</span><span class="o">.</span><span class="na">sourceDir</span><span class="o">),</span>
                           <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">applicationInfo</span><span class="o">.</span><span class="na">dataDir</span><span class="o">),</span>
                           <span class="s">"secondary-dexes"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"MultiDex installation failed ("</span> <span class="o">+</span> <span class="n">var2</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">")."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="33-doinstallation">3.3 doInstallation()</h4>

<p>调用 <strong>doInstallation()</strong> 开始装载操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doInstallation</span><span class="o">(</span><span class="nc">Context</span> <span class="n">mainContext</span><span class="o">,</span> <span class="nc">File</span> <span class="n">sourceApk</span><span class="o">,</span> <span class="nc">File</span> <span class="n">dataDir</span><span class="o">,</span>
                                   <span class="nc">String</span> <span class="n">secondaryFolderName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span>
                                   <span class="kt">boolean</span> <span class="n">reinstallOnPatchRecoverableException</span><span class="o">)</span>
  <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">IllegalArgumentException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span><span class="o">,</span>
         <span class="nc">NoSuchFieldException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">NoSuchMethodException</span><span class="o">,</span>
         <span class="nc">SecurityException</span><span class="o">,</span> <span class="nc">ClassNotFoundException</span><span class="o">,</span> <span class="nc">InstantiationException</span> <span class="o">{</span>

    <span class="c1">// 加锁保证安装线程安全</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">installedApk</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 检查本应用apk文件是否已装载</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">installedApk</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">sourceApk</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">installedApk</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sourceApk</span><span class="o">);</span>

            <span class="c1">// 类加载器</span>
            <span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// 获取类加载器，提取的Dex后续通过反射添加到类加载器</span>
                <span class="n">loader</span> <span class="o">=</span> <span class="n">mainContext</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">var25</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 如果运行在测试模式，有可能出现获取ClassLoader失败</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">loader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 如果运行在测试模式，有可能出现获取ClassLoader为空</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">clearOldDexDir</span><span class="o">(</span><span class="n">mainContext</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">var24</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Something went wrong when trying to clear old MultiDex extraction</span>
                    <span class="c1">// continuing without cleaning.</span>
                <span class="o">}</span>

                <span class="c1">// dataDir: /data/data/com.phantomvk.playground</span>
                <span class="c1">// secondaryFolderName: secondary-dexes</span>
                <span class="c1">// dexDir: /data/data/com.phantomvk.playground/code_cache/secondary-dexes</span>
                <span class="nc">File</span> <span class="n">dexDir</span> <span class="o">=</span> <span class="n">getDexDir</span><span class="o">(</span><span class="n">mainContext</span><span class="o">,</span> <span class="n">dataDir</span><span class="o">,</span> <span class="n">secondaryFolderName</span><span class="o">);</span>

                <span class="c1">// sourceApk: /data/app/com.phantomvk.playground-1.apk</span>
                <span class="c1">// dexDir: /data/data/com.phantomvk.playground/code_cache/secondary-dexes</span>
                <span class="c1">// 同时创建文件锁 MultiDex.lock</span>
                <span class="nc">MultiDexExtractor</span> <span class="n">extractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MultiDexExtractor</span><span class="o">(</span><span class="n">sourceApk</span><span class="o">,</span> <span class="n">dexDir</span><span class="o">);</span>
                <span class="nc">IOException</span> <span class="n">closeException</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

                <span class="k">try</span> <span class="o">{</span>
                    <span class="c1">// 从MultiDexExtractor加载dexes获得zipList</span>
                    <span class="nc">List</span> <span class="n">files</span> <span class="o">=</span> <span class="n">extractor</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">mainContext</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>

                    <span class="k">try</span> <span class="o">{</span>
                        <span class="c1">// 加载获取Dexes安装到ClassLoader</span>
                        <span class="n">installSecondaryDexes</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">dexDir</span><span class="o">,</span> <span class="n">files</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">var26</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(!</span><span class="n">reinstallOnPatchRecoverableException</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">throw</span> <span class="n">var26</span><span class="o">;</span>
                        <span class="o">}</span>

                        <span class="c1">// 加载失败重试，从MultiDexExtractor加载dexes获得zips</span>
                        <span class="n">files</span> <span class="o">=</span> <span class="n">extractor</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">mainContext</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

                        <span class="c1">// 加载获取的Dexes安装到ClassLoader</span>
                        <span class="n">installSecondaryDexes</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">dexDir</span><span class="o">,</span> <span class="n">files</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="c1">// 解除文件锁</span>
                        <span class="n">extractor</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">var23</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">closeException</span> <span class="o">=</span> <span class="n">var23</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">closeException</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="n">closeException</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>变量 <strong>dexDir</strong> 调试路径：</p>

<p><img src="/img/android/multidex/dexDir.png" alt="dexDir" /></p>

<p>进入 <strong>MultiDexExtractor.load</strong> 提取器获取列表</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="nc">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">File</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">String</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span>
                          <span class="kt">boolean</span> <span class="n">forceReload</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>

    <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">cacheLock</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"MultiDexExtractor was closed"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="nc">List</span> <span class="n">files</span><span class="o">;</span>
        <span class="c1">// 如果不是'强制提取'和'文件已被修改'就尝试复用文件</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">forceReload</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isModified</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">sourceApk</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">sourceCrc</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// 复用缓存在dexDir的Dexes文件</span>
                <span class="n">files</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">loadExistingExtractions</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">var6</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 复用缓存出现错误，重新提取文件</span>
                <span class="n">files</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">performExtractions</span><span class="o">();</span>
                <span class="c1">// 最后执行的数据会保存到SharedPreferences</span>
                <span class="n">putStoredApkInfo</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span> <span class="n">getTimeStamp</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sourceApk</span><span class="o">),</span>
                                 <span class="k">this</span><span class="o">.</span><span class="na">sourceCrc</span><span class="o">,</span> <span class="n">files</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 更新App后sourceCrc改变会触发dex重新提取</span>
            <span class="n">files</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">performExtractions</span><span class="o">();</span>
            <span class="c1">// 最后执行的数据会保存到SharedPreferences</span>
            <span class="n">putStoredApkInfo</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">prefsKeyPrefix</span><span class="o">,</span> <span class="n">getTimeStamp</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sourceApk</span><span class="o">),</span>
                             <span class="k">this</span><span class="o">.</span><span class="na">sourceCrc</span><span class="o">,</span><span class="n">files</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">files</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="34-multidexextractorperformextractions">3.4 MultiDexExtractor.performExtractions()</h4>

<p>实际执行的提取操作方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MultiDexExtractor</span><span class="o">.</span><span class="na">ExtractedDex</span><span class="o">&gt;</span> <span class="nf">performExtractions</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="c1">// extractedFilePrefix: com.phantomvk.playground-1.apk.classes</span>
    <span class="nc">String</span> <span class="n">extractedFilePrefix</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">sourceApk</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">".classes"</span><span class="o">;</span>

    <span class="k">this</span><span class="o">.</span><span class="na">clearDexDir</span><span class="o">();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MultiDexExtractor</span><span class="o">.</span><span class="na">ExtractedDex</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>

    <span class="c1">// APK本质是Zip，所以APK用Zip类型打开</span>
    <span class="nc">ZipFile</span> <span class="n">apk</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ZipFile</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sourceApk</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 名为classes.dex的主dex安装过程已完成提取</span>
        <span class="c1">// 运行时只从classes2.dex开始遍历，即secondaryNumber=2</span>
        <span class="kt">int</span> <span class="n">secondaryNumber</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        
        <span class="c1">// apk作为zip文件打开后，可从zip文件列表中获取指定文件名dex</span>
        <span class="c1">// 从apk内逐个获取dex文件，把dex文件写为zip文件</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">ZipEntry</span> <span class="n">dexFile</span> <span class="o">=</span> <span class="n">apk</span><span class="o">.</span><span class="na">getEntry</span><span class="o">(</span><span class="s">"classes"</span> <span class="o">+</span> <span class="n">secondaryNumber</span> <span class="o">+</span> <span class="s">".dex"</span><span class="o">);</span>
            <span class="n">dexFile</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="n">dexFile</span> <span class="o">=</span> <span class="n">apk</span><span class="o">.</span><span class="na">getEntry</span><span class="o">(</span><span class="s">"classes"</span> <span class="o">+</span> <span class="n">secondaryNumber</span> <span class="o">+</span> <span class="s">".dex"</span><span class="o">))</span> <span class="o">{</span>
            
            <span class="c1">// fileName: com.phantomvk.playground-1.apk.classes2.zip</span>
            <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">extractedFilePrefix</span> <span class="o">+</span> <span class="n">secondaryNumber</span> <span class="o">+</span> <span class="s">".zip"</span><span class="o">;</span>

            <span class="c1">// MultiDexExtractor.ExtractedDex父类File，存放提取的dex文件</span>
            <span class="c1">// dexDir: /data/data/com.phantomvk.playground/code_cache/secondary-dexes/</span>
            <span class="nc">MultiDexExtractor</span><span class="o">.</span><span class="na">ExtractedDex</span> <span class="n">extractedFile</span> <span class="o">=</span>
                <span class="k">new</span> <span class="nc">MultiDexExtractor</span><span class="o">.</span><span class="na">ExtractedDex</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">dexDir</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
            <span class="n">files</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">extractedFile</span><span class="o">);</span>

            <span class="c1">// 每个dex提取失败累计重试最多3次</span>
            <span class="kt">int</span> <span class="n">numAttempts</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">boolean</span> <span class="n">isExtractionSuccessful</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

            <span class="k">while</span><span class="o">(</span><span class="n">numAttempts</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isExtractionSuccessful</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">++</span><span class="n">numAttempts</span><span class="o">;</span>

                <span class="c1">// 提取dexFile(如classes2.dex)为extractedFile</span>
                <span class="c1">// 意思就是读取dex并保存到zip里面</span>
                <span class="n">extract</span><span class="o">(</span><span class="n">apk</span><span class="o">,</span> <span class="n">dexFile</span><span class="o">,</span> <span class="n">extractedFile</span><span class="o">,</span> <span class="n">extractedFilePrefix</span><span class="o">);</span>

                <span class="k">try</span> <span class="o">{</span>
                    <span class="c1">// 记录提取后文件的CRC</span>
                    <span class="n">extractedFile</span><span class="o">.</span><span class="na">crc</span> <span class="o">=</span> <span class="n">getZipCrc</span><span class="o">(</span><span class="n">extractedFile</span><span class="o">);</span>
                    <span class="n">isExtractionSuccessful</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">var18</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">isExtractionSuccessful</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// 提取失败则删除提取出来的文件</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">isExtractionSuccessful</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">extractedFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// 任意dex提取失败3次终止App启动流程</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">isExtractionSuccessful</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Could not create zip file "</span>
                    <span class="o">+</span> <span class="n">extractedFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()</span>
                    <span class="o">+</span> <span class="s">" for secondary dex ("</span> <span class="o">+</span> <span class="n">secondaryNumber</span> <span class="o">+</span> <span class="s">")"</span><span class="o">);</span>
            <span class="o">}</span>
            
            <span class="c1">// 完成本次提取执行++secondaryNumber，继续遍历余下dex</span>
            <span class="o">++</span><span class="n">secondaryNumber</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">apk</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">var17</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">"MultiDex"</span><span class="o">,</span> <span class="s">"Failed to close resource"</span><span class="o">,</span> <span class="n">var17</span><span class="o">);</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="c1">// 返回提取出来的zip列表</span>
    <span class="k">return</span> <span class="n">files</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>流程概括：</p>

<ol>
  <li>用读取 <strong>zip</strong> 的方式读取 <strong>APK</strong>；</li>
  <li>提取除了 <strong>classes.dex</strong> 外的其他 <strong>classesN.dex</strong> 文件到 <strong>MultiDexExtractor.ExtractedDex</strong>；</li>
  <li>每个 <strong>classesN.dex</strong> 文件对应一个 <strong>MultiDexExtractor.ExtractedDex</strong>，后者类型为 <strong>zip</strong>；</li>
  <li>记录提取后 <strong>MultiDexExtractor.ExtractedDex</strong> 的 CRC；</li>
  <li>返回 <strong>MultiDexExtractor.ExtractedDex</strong> 文件列表；</li>
</ol>

<p>提取完成后的 <strong>files</strong> 结构如下，可见子dex总共有4个，文件类型为 <strong>zip</strong>，保存在 <strong>dexDir</strong> 文件夹下面：</p>

<p><img src="/img/android/multidex/filesAfter.png" alt="filesAfter" /></p>

<h4 id="35-multidexextractorextract">3.5 MultiDexExtractor.extract()</h4>

<p>这里介绍如何从 <strong>dex</strong> 转换为列表 <strong>files</strong> 里保存的 <strong>zip</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="c1">// @param apk 安装包源文件apkName.apk</span>
<span class="c1">// @param dexFile 安装包源文件解压获得的classes2.dex、classes3.dex等等</span>
<span class="c1">// @param extractTo 提取某个dex保存到对应Zip文件</span>
<span class="c1">// @param extractedFilePrefix 提取出来文件前缀</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">extract</span><span class="o">(</span><span class="nc">ZipFile</span> <span class="n">apk</span><span class="o">,</span> <span class="nc">ZipEntry</span> <span class="n">dexFile</span><span class="o">,</span> <span class="nc">File</span> <span class="n">extractTo</span><span class="o">,</span> <span class="nc">String</span> <span class="n">extractedFilePrefix</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">FileNotFoundException</span> <span class="o">{</span>
    <span class="c1">// 为dex文件创建InputStream</span>
    <span class="nc">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">apk</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(</span><span class="n">dexFile</span><span class="o">);</span>
    <span class="nc">ZipOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="c1">// tmpFileName:   tmp-com.phantomvk.playground-1.apk.classes.zip</span>
    <span class="c1">// extractParent: /data/data/com.phantomvk.playground/code_cache/secondary-dexes/</span>
    <span class="nc">File</span> <span class="n">tmp</span> <span class="o">=</span> <span class="nc">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="s">"tmp-"</span> <span class="o">+</span> <span class="n">extractedFilePrefix</span><span class="o">,</span> <span class="s">".zip"</span><span class="o">,</span> <span class="n">extractTo</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">());</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 包装temp文件创建ZipOutputStream</span>
        <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ZipOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">tmp</span><span class="o">)));</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 每个zip文件名不一样，但是zip里面的dex都命名为classes.dex</span>
            <span class="nc">ZipEntry</span> <span class="n">classesDex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ZipEntry</span><span class="o">(</span><span class="s">"classes.dex"</span><span class="o">);</span>
            <span class="n">classesDex</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">dexFile</span><span class="o">.</span><span class="na">getTime</span><span class="o">());</span>
            <span class="c1">// 每个zip压缩包保存一个子文件dex</span>
            <span class="n">out</span><span class="o">.</span><span class="na">putNextEntry</span><span class="o">(</span><span class="n">classesDex</span><span class="o">);</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16384</span><span class="o">];</span> <span class="c1">// 16KB缓冲区</span>

            <span class="c1">// 从dex文件输入流in，写到zip文件输出流out</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span> <span class="n">length</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">length</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="n">out</span><span class="o">.</span><span class="na">closeEntry</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">tmp</span><span class="o">.</span><span class="na">setReadOnly</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Failed to mark readonly \""</span> <span class="o">+</span> <span class="n">tmp</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\" (tmp of \""</span> <span class="o">+</span> <span class="n">extractTo</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\")"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">tmp</span><span class="o">.</span><span class="na">renameTo</span><span class="o">(</span><span class="n">extractTo</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Failed to rename \""</span> <span class="o">+</span> <span class="n">tmp</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\" to \""</span> <span class="o">+</span> <span class="n">extractTo</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">closeQuietly</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
        <span class="n">tmp</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>流程概括：</p>

<ol>
  <li>先创建临时文件 <strong>tmp-[包名]-1.apk.classes.zip</strong>；</li>
  <li>在上述临时 <strong>zip</strong> 压缩包内创建文件 <strong>classes.dex</strong>；</li>
  <li>从 <strong>APK</strong> 复制 <strong>dex</strong> 并写入到 <strong>zip</strong> 的 <strong>classes.dex</strong> 中；</li>
  <li>最后把临时 <strong>zip</strong> 文件重命名为 <strong>extractTo</strong> 文件的文件名 <strong>[包名]-1.apk.classesN.zip</strong>；</li>
</ol>

<h2 id="四装载">四、装载</h2>

<p>上文只完成从安装包获得dexes，逐一提取 <strong>zip</strong> 文件到磁盘的工作，提取完成的文件并还没有添加到 <strong>ClassLoader</strong>。</p>

<h4 id="41-installsecondarydexes">4.1 installSecondaryDexes()</h4>

<p>继续调用 <strong>installSecondaryDexes</strong> 进行装载，根据不同版本进入不同分支：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">installSecondaryDexes</span><span class="o">(</span><span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">,</span>
                                          <span class="nc">File</span> <span class="n">dexDir</span><span class="o">,</span>
                                          <span class="nc">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">File</span><span class="o">&gt;</span> <span class="n">files</span><span class="o">)</span>
  <span class="kd">throws</span> <span class="nc">IllegalArgumentException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span><span class="o">,</span> <span class="nc">NoSuchFieldException</span><span class="o">,</span>
<span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">NoSuchMethodException</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">,</span>
<span class="nc">SecurityException</span><span class="o">,</span> <span class="nc">ClassNotFoundException</span><span class="o">,</span> <span class="nc">InstantiationException</span> <span class="o">{</span>

    <span class="c1">// 提取zip文件列表不为空</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">files</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="mi">19</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MultiDex</span><span class="o">.</span><span class="na">V19</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">files</span><span class="o">,</span> <span class="n">dexDir</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="no">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="mi">14</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MultiDex</span><span class="o">.</span><span class="na">V14</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">files</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">MultiDex</span><span class="o">.</span><span class="na">V4</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">files</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>用 <strong>Android4.4</strong> 作为示例进入 <strong>V19</strong>：</p>

<p><strong>APK</strong> 每个 <strong>dex</strong> 已经逐个提取为 <strong>MultiDexExtractor.ExtractedDex</strong> 文件，合并为文件列表后传递给变量 <strong>additionalClassPathEntries</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre><span class="c1">// additionalClassPathEntries: MultiDexExtractor.ExtractedDex 文件列表</span>
<span class="c1">// optimizedDirectory: /data/data/[包名]/code_cache/secondary-dexes/，即dexDir</span>
<span class="kd">static</span> <span class="kt">void</span> <span class="nf">install</span><span class="o">(</span><span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">File</span><span class="o">&gt;</span> <span class="n">additionalClassPathEntries</span><span class="o">,</span> <span class="nc">File</span> <span class="n">optimizedDirectory</span><span class="o">)</span>
  <span class="kd">throws</span> <span class="nc">IllegalArgumentException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span><span class="o">,</span>
         <span class="nc">NoSuchFieldException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span><span class="o">,</span>
         <span class="nc">NoSuchMethodException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

    <span class="c1">// dalvik.system.DexPathList dalvik.system.BaseDexClassLoader.pathList</span>
    <span class="nc">Field</span> <span class="n">pathListField</span> <span class="o">=</span> <span class="nc">MultiDex</span><span class="o">.</span><span class="na">findField</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="s">"pathList"</span><span class="o">);</span>
    <span class="nc">Object</span> <span class="n">dexPathList</span> <span class="o">=</span> <span class="n">pathListField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">loader</span><span class="o">);</span>

    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">IOException</span><span class="o">&gt;</span> <span class="n">suppressedExceptions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>

    <span class="c1">// 1. makeDexElements()优化zip为Element对象；</span>
    <span class="c1">// 2. expandFieldArray()里把Element对象存入ClassLoader；</span>
    <span class="nc">MultiDex</span><span class="o">.</span><span class="na">expandFieldArray</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="s">"dexElements"</span><span class="o">,</span>
                              <span class="n">makeDexElements</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">(</span><span class="n">additionalClassPathEntries</span><span class="o">),</span>
                                              <span class="n">optimizedDirectory</span><span class="o">,</span> <span class="n">suppressedExceptions</span><span class="o">));</span>

    <span class="c1">// 下面是异常情况的处理，可以忽略</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Iterator</span> <span class="n">var6</span> <span class="o">=</span> <span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

        <span class="k">while</span><span class="o">(</span><span class="n">var6</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">IOException</span> <span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IOException</span><span class="o">)</span><span class="n">var6</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="s">"MultiDex"</span><span class="o">,</span> <span class="s">"Exception in makeDexElement"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">Field</span> <span class="n">suppressedExceptionsField</span> <span class="o">=</span> <span class="nc">MultiDex</span><span class="o">.</span><span class="na">findField</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="s">"dexElementsSuppressedExceptions"</span><span class="o">);</span>
        <span class="nc">IOException</span><span class="o">[]</span> <span class="n">dexElementsSuppressedExceptions</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IOException</span><span class="o">[])((</span><span class="nc">IOException</span><span class="o">[])</span><span class="n">suppressedExceptionsField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">));</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dexElementsSuppressedExceptions</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">dexElementsSuppressedExceptions</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IOException</span><span class="o">[])</span><span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">IOException</span><span class="o">[</span><span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">IOException</span><span class="o">[]</span> <span class="n">combined</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">[</span><span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="n">dexElementsSuppressedExceptions</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
            <span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">combined</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">dexElementsSuppressedExceptions</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">combined</span><span class="o">,</span>
                             <span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span>
                             <span class="n">dexElementsSuppressedExceptions</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
            <span class="n">dexElementsSuppressedExceptions</span> <span class="o">=</span> <span class="n">combined</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">suppressedExceptionsField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="n">dexElementsSuppressedExceptions</span><span class="o">);</span>
        <span class="nc">IOException</span> <span class="n">exception</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">(</span><span class="s">"I/O exception during makeDexElement"</span><span class="o">);</span>
        <span class="n">exception</span><span class="o">.</span><span class="na">initCause</span><span class="o">((</span><span class="nc">Throwable</span><span class="o">)</span><span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="k">throw</span> <span class="n">exception</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>流程概括：</p>

<ol>
  <li>反射 <strong>ClassLoader</strong> 获取变量 <strong>pathList</strong>；</li>
  <li><strong>makeDexElements()</strong> 逐个优化包含 <strong>dex</strong> 的 <strong>zip</strong> 文件，再封装到 <strong>Element</strong> 实例中；</li>
  <li>从 <strong>pathList</strong> 反射获取 <strong>dexElements[]</strong>，读取原有文件；</li>
  <li>原有文件和步骤2封装的 <strong>Element</strong> 文件合并为新 <strong>Elements[]</strong>；</li>
  <li><strong>MultiDex.expandFieldArray()</strong> 执行新 <strong>Elements[]</strong> 替换 <strong>dexElements[]</strong>；</li>
</ol>

<h4 id="42-makedexelements">4.2 makeDexElements()</h4>

<p><strong>dexPathList</strong> 和 <strong>optimizedDirectory</strong> 作为参数调用 <strong>makeDexElements()</strong>。<strong>DexPathList</strong> 声明在类 <a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java#30"><strong>BaseDexClassLoader</strong></a></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseDexClassLoader</span> <span class="kd">extends</span> <span class="nc">ClassLoader</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DexPathList</span> <span class="n">pathList</span><span class="o">;</span>
    <span class="o">....</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>dexPathList</strong> 变量运行时内存结构：</p>

<p><img src="/img/android/multidex/loader.png" alt="loader" /></p>

<p><strong>optimizedDirectory</strong> 变量运行时内存结构：</p>

<p><img src="/img/android/multidex/optimizedDirectory.png" alt="optimizedDirectory" /></p>

<p>下面实例的这个是 <strong>V19.makeDexElements()</strong>，反射调用 <strong>DexPathList.makeDexElements()</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="nc">Object</span><span class="o">[]</span> <span class="nf">makeDexElements</span><span class="o">(</span><span class="nc">Object</span> <span class="n">dexPathList</span><span class="o">,</span>
                                        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">files</span><span class="o">,</span>
                                        <span class="nc">File</span> <span class="n">optimizedDirectory</span><span class="o">,</span>
                                        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">IOException</span><span class="o">&gt;</span> <span class="n">suppressedExceptions</span><span class="o">)</span>
  <span class="kd">throws</span> <span class="nc">IllegalAccessException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">NoSuchMethodException</span> <span class="o">{</span>

    <span class="c1">// 反射获得DexPathList.makeDexElements()</span>
    <span class="nc">Method</span> <span class="n">makeDexElements</span> <span class="o">=</span> <span class="nc">MultiDex</span><span class="o">.</span><span class="na">findMethod</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="s">"makeDexElements"</span><span class="o">,</span>
                                                 <span class="nc">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="c1">// 调用上述反射获取的方法把zip列表转换为Element[]</span>
    <span class="k">return</span> <span class="o">(</span><span class="nc">Object</span><span class="o">[])((</span><span class="nc">Object</span><span class="o">[])</span><span class="n">makeDexElements</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">dexPathList</span><span class="o">,</span> <span class="n">files</span><span class="o">,</span>
                                                       <span class="n">optimizedDirectory</span><span class="o">,</span>
                                                       <span class="n">suppressedExceptions</span><span class="o">));</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>makeDexElements(ArrayList, File, ArrayList)</strong> 位于类 <a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#206"><strong>DexPathList</strong></a></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="c1">// Makes an array of dex/resource path elements, one per element of the given array.</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Element</span><span class="o">[]</span> <span class="nf">makeDexElements</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">files</span><span class="o">,</span> <span class="nc">File</span> <span class="n">optimizedDirectory</span><span class="o">,</span>
                                         <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">IOException</span><span class="o">&gt;</span> <span class="n">suppressedExceptions</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Element</span><span class="o">&gt;</span> <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Element</span><span class="o">&gt;();</span>

    <span class="c1">// 遍历files</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">File</span> <span class="n">file</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">zip</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">DexFile</span> <span class="n">dex</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="no">DEX_SUFFIX</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 原生dex文件且不是放在zip/jar里面</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">dex</span> <span class="o">=</span> <span class="n">loadDexFile</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">optimizedDirectory</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">logE</span><span class="o">(</span><span class="s">"Unable to load dex file: "</span> <span class="o">+</span> <span class="n">file</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="no">APK_SUFFIX</span><span class="o">)</span> <span class="o">||</span> <span class="n">name</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="no">JAR_SUFFIX</span><span class="o">)</span>
                <span class="o">||</span> <span class="n">name</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="no">ZIP_SUFFIX</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 因为传入的文件都是zip后缀，所以进入这个分支</span>
            <span class="n">zip</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// 调用loadDexFile()方法，看下文</span>
                <span class="n">dex</span> <span class="o">=</span> <span class="n">loadDexFile</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">optimizedDirectory</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">suppressed</span><span class="o">)</span> <span class="o">{</span>
                 <span class="c1">// IOException might get thrown "legitimately" by the DexFile constructor if the</span>
                 <span class="c1">// zip file turns out to be resource-only (that is, no classes.dex file in it).</span>
                 <span class="c1">// Let dex == null and hang on to the exception to add to the tea-leaves for</span>
                 <span class="c1">// when findClass returns null.</span>
                <span class="n">suppressedExceptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">suppressed</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// We support directories for looking up resources.</span>
            <span class="c1">// This is only useful for running libcore tests.</span>
            <span class="n">elements</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Element</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">logW</span><span class="o">(</span><span class="s">"Unknown file type for: "</span> <span class="o">+</span> <span class="n">file</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">((</span><span class="n">zip</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">dex</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 封装DexFile为Element</span>
            <span class="n">elements</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Element</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">zip</span><span class="o">,</span> <span class="n">dex</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// ArrayList to Array.</span>
    <span class="k">return</span> <span class="n">elements</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Element</span><span class="o">[</span><span class="n">elements</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>把 <strong>zip</strong> 所在文件夹传到方法。<strong>zip</strong> 文件封装为 <strong>DexFile</strong> 过程会调用 <a href="http://androidxref.com/4.4.4_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#294">原生代码</a> 进行优化。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// Constructs a {@code DexFile} instance, as appropriate depending</span>
<span class="c1">// on whether {@code optimizedDirectory} is {@code null}.</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="nc">DexFile</span> <span class="nf">loadDexFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">,</span> <span class="nc">File</span> <span class="n">optimizedDirectory</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  
    <span class="c1">// 从上文可知optimizedDirectory非空</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">optimizedDirectory</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DexFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// 传入zip所在文件夹路径，计算dex优化后的保存路径</span>
        <span class="nc">String</span> <span class="n">optimizedPath</span> <span class="o">=</span> <span class="n">optimizedPathFor</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">optimizedDirectory</span><span class="o">);</span>

        <span class="c1">// DexFile构建过程会优化源码，优化后文件保存在optimizedPath</span>
        <span class="k">return</span> <span class="nc">DexFile</span><span class="o">.</span><span class="na">loadDex</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span> <span class="n">optimizedPath</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>为 <strong>zip</strong> 文件里面的 <strong>dex</strong> 提供优化后的保存路径</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// Converts a zip file path of an extracted secondary dex to an output file path for an</span>
<span class="c1">// associated optimized dex file.</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">optimizedPathFor</span><span class="o">(</span><span class="nc">File</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Any reproducible name ending with ".dex" should do but lets keep the same name</span>
    <span class="c1">// as DexPathList.optimizedPathFor</span>

    <span class="nc">File</span> <span class="n">optimizedDirectory</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getParentFile</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">optimizedFileName</span> <span class="o">=</span>
            <span class="n">fileName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">fileName</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="no">EXTRACTED_SUFFIX_LENGTH</span><span class="o">)</span>
            <span class="o">+</span> <span class="nc">MultiDexExtractor</span><span class="o">.</span><span class="na">DEX_SUFFIX</span><span class="o">;</span>
    <span class="nc">File</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">optimizedDirectory</span><span class="o">,</span> <span class="n">optimizedFileName</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>流程概括：</p>

<ol>
  <li>已知每个 <strong>zip</strong> 包含一个 <strong>dex</strong> 文件，为每个 <strong>dex</strong> 计算优化后产物的路径；</li>
  <li>而 <strong>MultiDexExtractor.ExtractedDex</strong> 就是 <strong>zip</strong>；</li>
  <li>然后用 <strong>ExtractedDex</strong> 通过 <strong>DexFile</strong> 类交给 JNI 去优化，优化产物会保存在上述路径；</li>
  <li><strong>DexFile</strong> 优化完成后封装为 <strong>Element</strong> 对象，并收集到 <strong>Element[]</strong>；</li>
  <li><strong>Element[]</strong> 拓展上文说的 <strong>dexElements[]</strong>；</li>
</ol>

<h4 id="43-expandfieldarray">4.3 expandFieldArray()</h4>

<p><strong>original[]</strong> 存放已经加载的主dex，<strong>extraElements[]</strong> 存放需要新增的子dex。</p>

<p>具体步骤：</p>

<ul>
  <li>通过反射 <strong>dexElements[]</strong> 获取 <strong>original[]</strong>；</li>
  <li>合成 <strong>original[]</strong> + <strong>extraElements[]</strong> 获得 <strong>combined[]</strong>；</li>
  <li>用 <strong>combined[]</strong> 反射替换 <strong>dexElements[]</strong>；</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1">// Replace the value of a field containing a non null array, by a new array containing the</span>
<span class="c1">// elements of the original array plus the elements of extraElements.</span>
<span class="c1">// @param instance the instance whose field is to be modified.</span>
<span class="c1">// @param fieldName the field to modify.</span>
<span class="c1">// @param extraElements elements to append at the end of the array.</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">expandFieldArray</span><span class="o">(</span><span class="nc">Object</span> <span class="n">instance</span><span class="o">,</span> <span class="nc">String</span> <span class="n">fieldName</span><span class="o">,</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">extraElements</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">NoSuchFieldException</span><span class="o">,</span> <span class="nc">IllegalArgumentException</span><span class="o">,</span>
        <span class="nc">IllegalAccessException</span> <span class="o">{</span>
    <span class="c1">// dexPathList获取makeDexElements的Field</span>
    <span class="nc">Field</span> <span class="n">jlrField</span> <span class="o">=</span> <span class="n">findField</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="n">fieldName</span><span class="o">);</span>

    <span class="c1">// 从实例获取Field的实际值original</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">original</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Object</span><span class="o">[])</span> <span class="n">jlrField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">instance</span><span class="o">);</span>

    <span class="c1">// 混合original[]和新的extraElements[]为combined[]</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">combined</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Object</span><span class="o">[])</span> <span class="nc">Array</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span>
            <span class="n">original</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getComponentType</span><span class="o">(),</span> <span class="n">original</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">extraElements</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">original</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">combined</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">original</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">extraElements</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">combined</span><span class="o">,</span> <span class="n">original</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">extraElements</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>

    <span class="c1">// 用combined[]覆盖原original[]</span>
    <span class="n">jlrField</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="n">combined</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用 <strong>expandFieldArray()</strong> 前 <strong>dexElements</strong> 只有主dex：</p>

<p><img src="/img/android/multidex/beforeExpandFieldArray.png" alt="beforeExpandFieldArray" /></p>

<p>调用 <strong>expandFieldArray()</strong> 后新增4个子dex：</p>

<p><img src="/img/android/multidex/afterExpandFieldArray.png" alt="beforeExpandFieldArray" /></p>

<p>提取工作完成后内存布局，<strong>optimizedDirectory</strong> 增加的几个 <strong>dex</strong> 文件是优化后的产物：</p>

<p><img src="/img/android/multidex/classload_done.png" alt="classload_done" /></p>

<h4 id="44-putstoredapkinfo">4.4 putStoredApkInfo()</h4>

<p>提取成功的dexes信息保存到 <strong>SharedPreferences</strong> 以便下次重用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1">// 只能在获取文件锁LOCK_FILENAME之后才能调用</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">putStoredApkInfo</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">String</span> <span class="n">keyPrefix</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeStamp</span><span class="o">,</span>
        <span class="kt">long</span> <span class="n">crc</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ExtractedDex</span><span class="o">&gt;</span> <span class="n">extractedDexes</span><span class="o">)</span> <span class="o">{</span>

    <span class="nc">SharedPreferences</span> <span class="n">prefs</span> <span class="o">=</span> <span class="n">getMultiDexPreferences</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
    <span class="nc">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">edit</span> <span class="o">=</span> <span class="n">prefs</span><span class="o">.</span><span class="na">edit</span><span class="o">();</span>

    <span class="n">edit</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">keyPrefix</span> <span class="o">+</span> <span class="no">KEY_TIME_STAMP</span><span class="o">,</span> <span class="n">timeStamp</span><span class="o">);</span> <span class="c1">// 时间戳</span>
    <span class="n">edit</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">keyPrefix</span> <span class="o">+</span> <span class="no">KEY_CRC</span><span class="o">,</span> <span class="n">crc</span><span class="o">);</span> <span class="c1">// CRC检验码</span>
    <span class="n">edit</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">keyPrefix</span> <span class="o">+</span> <span class="no">KEY_DEX_NUMBER</span><span class="o">,</span> <span class="n">extractedDexes</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// dex数量</span>

    <span class="kt">int</span> <span class="n">extractedDexId</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">ExtractedDex</span> <span class="n">dex</span> <span class="o">:</span> <span class="n">extractedDexes</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 记录每个子dex的CRC和最后修改时间</span>
        <span class="n">edit</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">keyPrefix</span> <span class="o">+</span> <span class="no">KEY_DEX_CRC</span> <span class="o">+</span> <span class="n">extractedDexId</span><span class="o">,</span> <span class="n">dex</span><span class="o">.</span><span class="na">crc</span><span class="o">);</span>
        <span class="n">edit</span><span class="o">.</span><span class="na">putLong</span><span class="o">(</span><span class="n">keyPrefix</span> <span class="o">+</span> <span class="no">KEY_DEX_TIME</span> <span class="o">+</span> <span class="n">extractedDexId</span><span class="o">,</span> <span class="n">dex</span><span class="o">.</span><span class="na">lastModified</span><span class="o">());</span>
        <span class="n">extractedDexId</span><span class="o">++;</span>
    <span class="o">}</span>

    <span class="c1">// 同步写入磁盘</span>
    <span class="n">edit</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="五总结">五、总结</h2>

<p>为规避首次启动解析dex时间过长的问题，个人有以下建议：</p>

<ul>
  <li>尽可能提高混淆强度，减少代码和方法使用量；</li>
  <li>只使用一次的方法手动合并到调用点，相当于内联；</li>
  <li>尽可能把代码存放在主dex，让提取工作在安装过程完成；</li>
  <li>不常用功能使用动态加载，让安装时间和提取时间都减少；</li>
</ul>

<p>虽然 <strong>Android5.0</strong> 及后期系统使用 <strong>ART</strong> 虚拟机，在安装过程会全部或部分优化dex，再也不会在应用启动时影响体验。但是减少代码量，即使只能降低安装时长也总归是好事。</p>
:ET