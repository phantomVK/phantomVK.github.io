I"QY<h2 id="一类签名">一、类签名</h2>

<p>TreeSet通过实现NavigableSet接口支持导航能力，方法又主要基于TreeMap的能力。TreeSet的方法没有添加锁保护，所以多线程操作不安全。本文源码来自JDK10。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">AbstractSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span>
    <span class="kd">implements</span> <span class="nc">NavigableSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;,</span> <span class="nc">Cloneable</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>特点：</p>
<ul>
  <li>元素基于自然排序，或Comparator决定排序顺序，具体由创建时所使用构造方法决定；</li>
  <li>保证基本操作的时间复杂度为log(n)，如：add，remove，contains；</li>
  <li>TreeSet本质是有序的、无重复的集合类；</li>
</ul>

<h2 id="二数据成员">二、数据成员</h2>

<p>存储元素的Map，实际应该是TreeMap</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">transient</span> <span class="nc">NavigableMap</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>用于表示元素的状态为已存在</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Object</span> <span class="no">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="三构造方法">三、构造方法</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1">// 通过指定NavigableMap构建TreeSet</span>
<span class="nc">TreeSet</span><span class="o">(</span><span class="nc">NavigableMap</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">m</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 默认构造方法</span>
<span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;());</span>
<span class="o">}</span>

<span class="c1">// 通过外部comparator构建TreeSet</span>
<span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">comparator</span><span class="o">));</span>
<span class="o">}</span>

<span class="c1">// 通过指定集合构建TreeSet</span>
<span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">();</span>
    <span class="n">addAll</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 通过指定SortedSet构建TreeSet</span>
<span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">(</span><span class="nc">SortedSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">comparator</span><span class="o">());</span>
    <span class="n">addAll</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="四成员方法">四、成员方法</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
</pre></td><td class="rouge-code"><pre><span class="c1">// 返回集合中已保存元素数量</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 返回集合是否为空</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 返回集合是否包含该元素</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 添加元素</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="no">PRESENT</span><span class="o">)==</span><span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 移除元素</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">o</span><span class="o">)==</span><span class="no">PRESENT</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 清空所有元素</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">m</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 批量添加元素</span>
<span class="kd">public</span>  <span class="kt">boolean</span> <span class="nf">addAll</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Use linear-time version if applicable</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
        <span class="n">c</span> <span class="k">instanceof</span> <span class="nc">SortedSet</span> <span class="o">&amp;&amp;</span>
        <span class="n">m</span> <span class="k">instanceof</span> <span class="nc">TreeMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SortedSet</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SortedSet</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;)</span> <span class="n">c</span><span class="o">;</span>
        <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TreeMap</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">m</span><span class="o">;</span>
        <span class="nc">Comparator</span><span class="o">&lt;?&gt;</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">comparator</span><span class="o">();</span>
        <span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">mc</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">comparator</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cc</span><span class="o">==</span><span class="n">mc</span> <span class="o">||</span> <span class="o">(</span><span class="n">cc</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cc</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mc</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">map</span><span class="o">.</span><span class="na">addAllForTreeSet</span><span class="o">(</span><span class="n">set</span><span class="o">,</span> <span class="no">PRESENT</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回子集</span>
<span class="kd">public</span> <span class="nc">NavigableSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">subSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">fromInclusive</span><span class="o">,</span>
                              <span class="no">E</span> <span class="n">toElement</span><span class="o">,</span>   <span class="kt">boolean</span> <span class="n">toInclusive</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">m</span><span class="o">.</span><span class="na">subMap</span><span class="o">(</span><span class="n">fromElement</span><span class="o">,</span> <span class="n">fromInclusive</span><span class="o">,</span>
                                   <span class="n">toElement</span><span class="o">,</span>   <span class="n">toInclusive</span><span class="o">));</span>
<span class="o">}</span>

<span class="c1">// 返回指定范围元素：[headElement, toElement] 或 [headElement, toElement)</span>
<span class="kd">public</span> <span class="nc">NavigableSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">headSet</span><span class="o">(</span><span class="no">E</span> <span class="n">toElement</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">inclusive</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">m</span><span class="o">.</span><span class="na">headMap</span><span class="o">(</span><span class="n">toElement</span><span class="o">,</span> <span class="n">inclusive</span><span class="o">));</span>
<span class="o">}</span>

<span class="c1">// 返回指定范围元素：[headElement, toElement)</span>
<span class="kd">public</span> <span class="nc">SortedSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">headSet</span><span class="o">(</span><span class="no">E</span> <span class="n">toElement</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">headSet</span><span class="o">(</span><span class="n">toElement</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回指定范围元素：[fromElement, tailElement] 或 [fromElement, tailElement)</span>
<span class="kd">public</span> <span class="nc">NavigableSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">tailSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">inclusive</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">m</span><span class="o">.</span><span class="na">tailMap</span><span class="o">(</span><span class="n">fromElement</span><span class="o">,</span> <span class="n">inclusive</span><span class="o">));</span>
<span class="o">}</span>

<span class="c1">// 返回指定范围元素：[fromElement, tailElement]</span>
<span class="kd">public</span> <span class="nc">SortedSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">tailSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">tailSet</span><span class="o">(</span><span class="n">fromElement</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回指定范围元素：[fromElement, toElement)</span>
<span class="kd">public</span> <span class="nc">SortedSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">subSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">,</span> <span class="no">E</span> <span class="n">toElement</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">subSet</span><span class="o">(</span><span class="n">fromElement</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">toElement</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 获取comparator</span>
<span class="kd">public</span> <span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="nf">comparator</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">comparator</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 获取第一个元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">first</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">firstKey</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 获取最后一个元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">last</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">lastKey</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 返回小于e的最大元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">lower</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">lowerKey</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回小于/等于e的最大元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">floor</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">floorKey</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回大于/等于e的最小元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">ceiling</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">ceilingKey</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 返回大于e的最小元素</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">higher</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">higherKey</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 获取第一个元素，并把该元素从TreeMap中移除</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">pollFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,?&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">pollFirstEntry</span><span class="o">();</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 获取最后一个元素，并把该元素从TreeMap中移除</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">pollLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,?&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">pollLastEntry</span><span class="o">();</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET