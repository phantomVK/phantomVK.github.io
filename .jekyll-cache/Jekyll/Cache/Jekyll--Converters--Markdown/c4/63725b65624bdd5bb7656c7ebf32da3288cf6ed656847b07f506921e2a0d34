I"8<h2 id="一类签名">一、类签名</h2>

<p><strong>ArrayDeque</strong> 是实现 <strong>Deque</strong> 接口且容量可变的双端队列数组。数组实现的双端队列没有容量限制，需要更多空间时再进行扩容。</p>

<p>此类线程不安全，如果没有外部同步约束，就不支持多线程并发。值得注意的是，本双端队列不接受空对象，作为栈使用时比 <strong>Stack</strong> 快，作为队列使用时比 <strong>LinkedList</strong> 快。</p>

<p>大多数 <strong>ArrayDeque</strong> 方法执行消耗常量时间，除了 <strong>remove(Object)</strong>、 <strong>removeFirstOccurrence</strong>，<strong>removeLastOccurrence</strong>、<strong>contains</strong>、<strong>iterator</strong> 和批量操作是线性时间消耗的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">AbstractCollection</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span>
                           <span class="kd">implements</span> <span class="nc">Deque</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;,</span> <span class="nc">Cloneable</span><span class="o">,</span> <span class="nc">Serializable</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>其次，虚拟机擅长基于有效切片中索引的递增、递减操作，对简单数组循环进行优化。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">...</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>源码来自 JDK11</p>

<h2 id="二数据成员">二、数据成员</h2>

<p>保存双端数组队列变量。当数组的 <strong>cells</strong> 没有持有双端队列元素时为空。数组存在至少一个空位，作为队列的尾部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">transient</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>头元素在数组中的索引值，下标值对应元素由remove()或pop()方法移除。若队列没有元素，head为 <strong>[0, elements.length)</strong> 间任意值，与尾引用值相同</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">transient</span> <span class="kt">int</span> <span class="n">head</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>下一个元素存入数组尾部的索引值，所以 <strong>elements[tail]</strong> 一直为空</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">transient</span> <span class="kt">int</span> <span class="n">tail</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="三常量">三、常量</h2>

<p>可申请数组的最大容量值。有些虚拟机实现会在数组中保留 <strong>header words</strong>。所以尝试分配更大数组空间会导致 <strong>OutOfMemoryError</strong>。使用此值避免了这种问题。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_ARRAY_SIZE</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">-</span> <span class="mi">8</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="四扩容方法">四、扩容方法</h2>

<p>增加至少 <strong>needed</strong> 个数组空间，必须为正数。方法计算新容量值时，已经完成整形值向上溢出的处理</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">grow</span><span class="o">(</span><span class="kt">int</span> <span class="n">needed</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 获取原数组容量值</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    
    <span class="c1">// 可 newCapacity = oldCapacity + jump </span>
    <span class="c1">// 或 newCapacity = oldCapacity + needed</span>
    <span class="c1">// 或 newCapacity = MAX_ARRAY_SIZE</span>
    <span class="c1">// 或 newCapacity = Integer.MAX_VALUE</span>
    <span class="kt">int</span> <span class="n">newCapacity</span><span class="o">;</span>

    <span class="c1">// 若原容量值小于64，jump为原值加2，否则jump为原值一半</span>
    <span class="kt">int</span> <span class="n">jump</span> <span class="o">=</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="o">)</span> <span class="o">?</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)</span> <span class="o">:</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span>

    <span class="c1">// 计算jump是否比理想扩容值needed小</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">jump</span> <span class="o">&lt;</span> <span class="n">needed</span>
        <span class="o">||</span> <span class="o">(</span><span class="n">newCapacity</span> <span class="o">=</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">+</span> <span class="n">jump</span><span class="o">))</span> <span class="o">-</span> <span class="no">MAX_ARRAY_SIZE</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="n">newCapacity</span> <span class="o">=</span> <span class="n">newCapacity</span><span class="o">(</span><span class="n">needed</span><span class="o">,</span> <span class="n">jump</span><span class="o">);</span>

    <span class="c1">// 根据newCapacity创建新数组，并把原数组元素拷贝到新数组</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">newCapacity</span><span class="o">);</span>

    <span class="c1">// Exceptionally, here tail == head needs to be disambiguated</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">tail</span> <span class="o">&lt;</span> <span class="n">head</span> <span class="o">||</span> <span class="o">(</span><span class="n">tail</span> <span class="o">==</span> <span class="n">head</span> <span class="o">&amp;&amp;</span> <span class="n">es</span><span class="o">[</span><span class="n">head</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// wrap around; slide first leg forward to end of array</span>
        <span class="kt">int</span> <span class="n">newSpace</span> <span class="o">=</span> <span class="n">newCapacity</span> <span class="o">-</span> <span class="n">oldCapacity</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span>
                         <span class="n">es</span><span class="o">,</span> <span class="n">head</span> <span class="o">+</span> <span class="n">newSpace</span><span class="o">,</span>
                         <span class="n">oldCapacity</span> <span class="o">-</span> <span class="n">head</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="o">(</span><span class="n">head</span> <span class="o">+=</span> <span class="n">newSpace</span><span class="o">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>为边缘条件进行容量计算，尤其是向上溢出的情况。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">int</span> <span class="nf">newCapacity</span><span class="o">(</span><span class="kt">int</span> <span class="n">needed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">jump</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">minCapacity</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">((</span><span class="n">minCapacity</span> <span class="o">=</span> <span class="n">oldCapacity</span> <span class="o">+</span> <span class="n">needed</span><span class="o">)</span> <span class="o">-</span> <span class="no">MAX_ARRAY_SIZE</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 最大容量值溢出</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">minCapacity</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Sorry, deque too big"</span><span class="o">);</span>
        
        <span class="c1">// 设置为最大值</span>
        <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">needed</span> <span class="o">&gt;</span> <span class="n">jump</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">minCapacity</span><span class="o">;</span>

    <span class="c1">// needed &lt;= jump</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">+</span> <span class="n">jump</span> <span class="o">-</span> <span class="no">MAX_ARRAY_SIZE</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="o">?</span> <span class="n">oldCapacity</span> <span class="o">+</span> <span class="n">jump</span>
        <span class="o">:</span> <span class="no">MAX_ARRAY_SIZE</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="五构造方法">五、构造方法</h2>

<p>构造默认队列，初始容量为16</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">ArrayDeque</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过指定容量值构造双端数组队列</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">ArrayDeque</span><span class="o">(</span><span class="kt">int</span> <span class="n">numElements</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 若numElements大于1小于MAX_VALUE，大小为numElements+1，多出来的一个空间给尾指针</span>
    <span class="n">elements</span> <span class="o">=</span>
        <span class="k">new</span> <span class="nc">Object</span><span class="o">[(</span><span class="n">numElements</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span>
                   <span class="o">(</span><span class="n">numElements</span> <span class="o">==</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">?</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">:</span>
                   <span class="n">numElements</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过指定集合构造双端数组队列，初始队列大小为执行集合元素数量值</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">ArrayDeque</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
    <span class="n">copyElements</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="六静态方法">六、静态方法</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="c1">// 循环递增i，实现对i取模的能力。先决条件和事后条件为：0 &lt;= i &lt; modulus</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">inc</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modulus</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(++</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">modulus</span><span class="o">)</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 循环递减i，实现对i取模的能力。先决条件和事后条件为：0 &lt;= i &lt; modulus</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">dec</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modulus</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(--</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">i</span> <span class="o">=</span> <span class="n">modulus</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 循环增加指定距离值到i，实现对i取模的能力</span>
<span class="c1">// 先决条件: 0 &lt;= i &lt; modulus, 0 &lt;= distance &lt;= modulus</span>
<span class="c1">// 返回值：index 0 &lt;= i &lt; modulus</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">inc</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modulus</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">i</span> <span class="o">+=</span> <span class="n">distance</span><span class="o">)</span> <span class="o">-</span> <span class="n">modulus</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="n">i</span> <span class="o">-=</span> <span class="n">modulus</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 从i减去j，并对i取模的能力</span>
<span class="c1">// 索引i必须在逻辑上在索引j之前</span>
<span class="c1">// 先决条件: 0 &lt;= i &lt; modulus, 0 &lt;= j &lt; modulus； </span>
<span class="c1">// 返回值：j到i之间的环形距离；</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">sub</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="kt">int</span> <span class="n">modulus</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">i</span> <span class="o">-=</span> <span class="n">j</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">modulus</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 返回数组中索引值为i的元素</span>
<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="no">E</span> <span class="nf">elementAt</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="no">E</span><span class="o">)</span> <span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="七成员方法">七、成员方法</h2>

<p>元素主要的插入、获取方法是 <strong>addFirst</strong>、<strong>addLast</strong>、 <strong>pollFirst</strong>、 <strong>pollLast</strong>，其他方法都在此基础上实现</p>

<h4 id="71-add">7.1 add</h4>

<p>把执行元素插入到队列头部，若元素为空抛出NullPointerException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="n">es</span><span class="o">[</span><span class="n">head</span> <span class="o">=</span> <span class="n">dec</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">)]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="n">tail</span><span class="o">)</span>
        <span class="n">grow</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>把执行元素插入到队列尾部，若元素为空抛出NullPointerException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="n">es</span><span class="o">[</span><span class="n">tail</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="o">(</span><span class="n">tail</span> <span class="o">=</span> <span class="n">inc</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">)))</span>
        <span class="n">grow</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>把指定集合的所有元素添加到队列的尾部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addAll</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="n">needed</span><span class="o">;</span>
    <span class="c1">// 需要扩容大小 = 已用空间 + 新元素数量 + 1 - 数组长度</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">needed</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span> <span class="o">=</span> <span class="n">size</span><span class="o">())</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="n">grow</span><span class="o">(</span><span class="n">needed</span><span class="o">);</span>
    <span class="n">copyElements</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="k">return</span> <span class="nf">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="72-copyelements">7.2 copyElements</h4>

<p>把集合C的元素添加到本队列尾部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">copyElements</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">c</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">addLast</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="73-offer">7.3 offer</h4>

<p>把指定元素插入到队列头部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">offerFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">addFirst</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>把指定元素插入到队列头部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">offerLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">addLast</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="74-remove">7.4 remove</h4>

<p>若找不到头元素就抛出NoSuchElementException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">removeFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">pollFirst</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>若找不到最后一个元素就抛出NoSuchElementException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">pollLast</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="75-poll">7.5 poll</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">pollFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">h</span><span class="o">;</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">head</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">es</span><span class="o">[</span><span class="n">h</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">inc</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="no">E</span> <span class="nf">pollLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">t</span><span class="o">;</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">dec</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">es</span><span class="o">[</span><span class="n">tail</span> <span class="o">=</span> <span class="n">t</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="76-get">7.6 get</h4>

<p>找不到元素抛出NoSuchElementException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 通过head索引值获取元素</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>找不到元素抛出NoSuchElementException</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">getLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="no">E</span> <span class="n">e</span> <span class="o">=</span> <span class="n">elementAt</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">dec</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="77-peek">7.7 peek</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">E</span> <span class="nf">peekFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">elementAt</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="no">E</span> <span class="nf">peekLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span><span class="o">;</span>
    <span class="k">return</span> <span class="nf">elementAt</span><span class="o">(</span><span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">,</span> <span class="n">dec</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="78-firstoccurrence">7.8 firstOccurrence</h4>

<p>移出第一个命中的指定元素。如果队列存在多个相同元素，每次调用方法仅移除一个。</p>

<p>每次查找从头部开始，逐个遍历元素寻找匹配项。元素命中并移除成功返回 <strong>true</strong>，元素为null或不包含该元素返回 <strong>false</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeFirstOccurrence</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">tail</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="o">)</span> <span class="o">?</span> <span class="n">end</span> <span class="o">:</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
             <span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="n">delete</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">to</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>移出最后一个命中的指定元素。如果队列存在多个相同元素，每次调用方法仅移除一个。元素命中并移除成功返回 <strong>true</strong>，元素为null或不包含该元素返回 <strong>false</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeLastOccurrence</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">tail</span><span class="o">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="o">)</span> <span class="o">?</span> <span class="n">end</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
             <span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">i</span><span class="o">--;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="n">delete</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">to</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="79-队列方法">7.9 队列方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="c1">// 把指定元素插入到队列尾部</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">addLast</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// 把指定元素插入到队列尾部</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">offer</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">offerLast</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 获取并移除队列头元素，若队列没有元素则抛出NoSuchElementException</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">removeFirst</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 获取并移除队列头元素，如果元素不存在返回null</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">pollFirst</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 仅获取元素队列头元素，但不从队列中移除。如果队列为空，此方法会抛出异常</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">element</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">getFirst</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 仅获取元素队列头元素，但不从队列中移除。如果队列为空，此方法返回null</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">peekFirst</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="710-栈方法">7.10 栈方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="c1">// 向栈中压入元素，即向本队列头部插入元素。若指定元素为空抛出NullPointerException</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">addFirst</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 从栈中弹出元素，即从本队列头部移除并返回元素。若队列为空抛出NoSuchElementException</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">removeFirst</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// 从元素数组中移除指定索引的元素。</span>
<span class="kt">boolean</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">capacity</span> <span class="o">=</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">;</span>
    <span class="c1">// number of elements before to-be-deleted elt</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">front</span> <span class="o">=</span> <span class="n">sub</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">capacity</span><span class="o">);</span>
    <span class="c1">// number of elements after to-be-deleted elt</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">back</span> <span class="o">=</span> <span class="n">sub</span><span class="o">(</span><span class="n">t</span> <span class="o">=</span> <span class="n">tail</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">front</span> <span class="o">&lt;</span> <span class="n">back</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// move front elements forwards</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="n">h</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">front</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// Wrap around</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="n">es</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">es</span><span class="o">[</span><span class="n">capacity</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="n">h</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">front</span> <span class="o">-</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">es</span><span class="o">[</span><span class="n">h</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">inc</span><span class="o">(</span><span class="n">h</span><span class="o">,</span> <span class="n">capacity</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// move back elements backwards</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="n">dec</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">capacity</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">back</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// Wrap around</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">capacity</span> <span class="o">-</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
            <span class="n">es</span><span class="o">[</span><span class="n">capacity</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">es</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">es</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">t</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">es</span><span class="o">[</span><span class="n">tail</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="711-集合方法">7.11 集合方法</h4>

<p>返回双端队列包含元素的数量</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">sub</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>若双端队列不含任何元素返回true。在头引用和尾引用指向同一个对象的时候能表示双端队列为空。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">head</span> <span class="o">==</span> <span class="n">tail</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="712-位操作">7.12 位操作</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span><span class="o">[]</span> <span class="nf">nBits</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[((</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setBit</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">bits</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">bits</span><span class="o">[</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="o">]</span> <span class="o">|=</span> <span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isClear</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">bits</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">bits</span><span class="o">[</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="o">]</span> <span class="o">&amp;</span> <span class="o">(</span><span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">))</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="713-contains">7.13 contains</h4>

<p>如果队列包含指定元素返回true。一般来说，队列可能存在多个相同的元素。所以本方法返回true表示队列至少存在一个元素与指定元素相等。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">tail</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="o">)</span> <span class="o">?</span> <span class="n">end</span> <span class="o">:</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
             <span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">to</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="714-remove">7.14 remove</h4>

<p>从队列中移除指定单个元素。如果队列不含该元素，则队列不会改变。一般来说，队列可能会含有多和相同的元素，每次仅移除其中一个。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">removeFirstOccurrence</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="714-clear">7.14 clear</h4>

<p>从移除队列中所有元素</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">circularClear</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">);</span>
    <span class="n">head</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用以下方法，空间逐个置空</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">// Nulls out slots starting at array index i, upto index end.</span>
<span class="c1">// Condition i == end means "empty" - nothing to do.</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">circularClear</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// assert 0 &lt;= i &amp;&amp; i &lt; es.length;</span>
    <span class="c1">// assert 0 &lt;= end &amp;&amp; end &lt; es.length;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">to</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="o">)</span> <span class="o">?</span> <span class="n">end</span> <span class="o">:</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
         <span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">to</span> <span class="o">=</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">to</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">to</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="715-toarray">7.15 toArray</h4>

<p>返回包含双端队列所有元素的数组，元素顺序和双端队列元素顺序一致。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Object</span><span class="o">[]</span> <span class="nf">toArray</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">toArray</span><span class="o">(</span><span class="nc">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span><span class="o">[]</span> <span class="nf">toArray</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">[]&gt;</span> <span class="n">klazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 获取元素数组</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="kd">final</span> <span class="no">T</span><span class="o">[]</span> <span class="n">a</span><span class="o">;</span>
    <span class="c1">// 分别获取头引用和未引用</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">head</span><span class="o">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">tail</span><span class="o">,</span> <span class="n">end</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">end</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">+</span> <span class="o">((</span><span class="n">head</span> <span class="o">&lt;=</span> <span class="n">tail</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Uses null extension feature of copyOfRange</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">klazz</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// 整形上溢</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">head</span><span class="o">,</span> <span class="n">klazz</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">head</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">!=</span> <span class="n">tail</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">head</span><span class="o">,</span> <span class="n">tail</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>传入目标数组，并把双端队列所有元素放入该数组，元素顺序和双端队列元素顺序一致。返回数组的类型和传入数组类型相同。如果传入数组大小不足容纳所有元素，方法会创建新数组，且新容量和所放入元素数量一致，然后放入所有元素并返回。所以，会出现传入数组和返回数组不是同一个对象的现象。</p>

<p>如果传入数组空间足够存入所有元素，该数组的下一个空间会被置为 <strong>null</strong>。</p>

<p>本方法可以实现队列转数组的功能：<strong>String[] y = x.toArray(new String[0]);</strong>。且值得注意的是，传入 <strong>toArray(new Object[0])</strong> 和 传入 <strong>toArray()</strong> 的效果完全相同。</p>

<p>数组元素的运行时类型不匹配双端队列元素的运行时类型时，抛出 <strong>ArrayStoreException</strong>；
数组为空抛出 <strong>NullPointerException</strong>；</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span><span class="o">[]</span> <span class="nf">toArray</span><span class="o">(</span><span class="no">T</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">())</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">toArray</span><span class="o">((</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">[]&gt;)</span> <span class="n">a</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
    <span class="kd">final</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">es</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
         <span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">=</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">es</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">j</span> <span class="o">+=</span> <span class="n">len</span><span class="o">)</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
        <span class="n">a</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET