I"J<p>在 <strong>Fragment</strong> 内部调用自有方法 <strong>startActivityForResult()</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startActivityForResult</span><span class="o">(</span><span class="nc">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>该方法辗转调用同名重载方法，方法内调用名为 <strong>mHost</strong> 变量的方法，该变量的类型为 <strong>FragmentHostCallback</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startActivityForResult</span><span class="o">(</span><span class="nc">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Bundle</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 如果Fragment没有绑定到Activity，即宿主实例不存在，会抛出异常</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mHost</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Fragment "</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="s">" not attached to Activity"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 调用方法</span>
    <span class="n">mHost</span><span class="o">.</span><span class="na">onStartActivityFromFragment</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>FragmentHostCallback</strong> 是抽象类，继承抽象父类 <strong>FragmentContainer</strong>，由 <strong>Fragment</strong> 所依附的宿主实现。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">FragmentHostCallback</span> <span class="n">mHost</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>实现该抽象类表示具体实现类具有保存和展示Fragment的能力。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">FragmentHostCallback</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">FragmentContainer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartActivityFromFragment</span><span class="o">(</span>
            <span class="nc">Fragment</span> <span class="n">fragment</span><span class="o">,</span> <span class="nc">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Bundle</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
                    <span class="s">"Starting activity with a requestCode requires a FragmentActivity host"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">mContext</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>FragmentHostCallback</strong> 的实际实现类是 <strong>FragmentActivity</strong> 的内部类 <strong>HostCallbacks</strong>。实现抽象类的同时还复写了父类的实现逻辑，当 <strong>Fragment</strong> 调用该方法时，实际调用 <strong>FragmentActivity</strong> 实现的成员方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FragmentActivity</span> <span class="kd">extends</span> <span class="nc">BaseFragmentActivityApi16</span> <span class="kd">implements</span>
        <span class="nc">ViewModelStoreOwner</span><span class="o">,</span>
        <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">OnRequestPermissionsResultCallback</span><span class="o">,</span>
        <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">RequestPermissionsRequestCodeValidator</span> <span class="o">{</span>
            
    <span class="o">.....</span>
        
    <span class="c1">// 面试考点：非静态内部类隐式持有外部类的实例引用</span>
    <span class="kd">class</span> <span class="nc">HostCallbacks</span> <span class="kd">extends</span> <span class="nc">FragmentHostCallback</span><span class="o">&lt;</span><span class="nc">FragmentActivity</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="o">.....</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartActivityFromFragment</span><span class="o">(</span>
                <span class="nc">Fragment</span> <span class="n">fragment</span><span class="o">,</span> <span class="nc">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Bundle</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 内部类调用了宿主的成员方法，相当于做了一层桥接</span>
            <span class="nc">FragmentActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">startActivityFromFragment</span><span class="o">(</span><span class="n">fragment</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>看宿主 <strong>FragmentActivity</strong> 的方法实现：方法内实参 <strong>requestCode</strong> 高16位保存 <strong>(requestIndex+1)</strong> 的值，低16位保存来自 <strong>Fragment</strong> 的 <strong>requestCode</strong> 值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startActivityFromFragment</span><span class="o">(</span><span class="nc">Fragment</span> <span class="n">fragment</span><span class="o">,</span> <span class="nc">Intent</span> <span class="n">intent</span><span class="o">,</span>
        <span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Bundle</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">mStartedActivityFromFragment</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">startActivityForResult</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">checkForValidRequestCode</span><span class="o">(</span><span class="n">requestCode</span><span class="o">);</span>
        <span class="c1">// Activity给Fragment的请求生成requestIndex，用于后续匹配返回的Fragment</span>
        <span class="kt">int</span> <span class="n">requestIndex</span> <span class="o">=</span> <span class="n">allocateRequestIndex</span><span class="o">(</span><span class="n">fragment</span><span class="o">);</span>
        <span class="c1">// requestIndex放在requestCode实参高16位，Fragment提供的requestCode放在实参低16位</span>
        <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">startActivityForResult</span><span class="o">(</span>
                <span class="k">this</span><span class="o">,</span> <span class="n">intent</span><span class="o">,</span> <span class="o">((</span><span class="n">requestIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="o">),</span> <span class="n">options</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">mStartedActivityFromFragment</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>当结果从其他 <strong>Activity</strong> 回到 <strong>Fragment</strong> 所在宿主 <strong>Activity</strong> 时，宿主页面先检查 <strong>requestIndex</strong> 的值，判断原始请求是否来自 <strong>Fragment</strong>。</p>

<p>检查逻辑很简单，<strong>requestIndex</strong> 高16位非零就表示该请求来自 <strong>Fragment</strong>，然后找源 <strong>Fragment</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="nc">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">mFragments</span><span class="o">.</span><span class="na">noteStateNotSaved</span><span class="o">();</span>
    <span class="c1">// 取出requestCode高16位</span>
    <span class="kt">int</span> <span class="n">requestIndex</span> <span class="o">=</span> <span class="n">requestCode</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">requestIndex</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">requestIndex</span><span class="o">--;</span>

        <span class="c1">// 用requestCode查找对应的请求Fragment</span>
        <span class="nc">String</span> <span class="n">who</span> <span class="o">=</span> <span class="n">mPendingFragmentActivityResults</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestIndex</span><span class="o">);</span>
        <span class="c1">// 移除该requestIndex的记录</span>
        <span class="n">mPendingFragmentActivityResults</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">requestIndex</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">who</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Activity result delivered for unknown Fragment."</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 从Activity的Fragment栈查找接收数据的目标实例</span>
        <span class="nc">Fragment</span> <span class="n">targetFragment</span> <span class="o">=</span> <span class="n">mFragments</span><span class="o">.</span><span class="na">findFragmentByWho</span><span class="o">(</span><span class="n">who</span><span class="o">);</span>
        <span class="c1">// Fragment如果已被销毁则为空</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">targetFragment</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="no">TAG</span><span class="o">,</span> <span class="s">"Activity result no fragment exists for who: "</span> <span class="o">+</span> <span class="n">who</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 进行与操作后就是请求的原始requestCode，即低16位数据</span>
            <span class="c1">// 作为参数和返回结果让Fragment自行处理onActivityResult</span>
            <span class="n">targetFragment</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">PermissionCompatDelegate</span> <span class="n">delegate</span> <span class="o">=</span>
            <span class="nc">ActivityCompat</span><span class="o">.</span><span class="na">getPermissionCompatDelegate</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">delegate</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">delegate</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Delegate has handled the activity result</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="c1">// 请求交给Activity执行</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>由于上述调用位于 <strong>FragmentActivity</strong> 中，如果重写该方法时没调用 <strong>super.onActivityResult(int requestCode, int resultCode, Intent data)</strong>，页面返回结果不会得到正确处理，对应 <strong>Fragment</strong> 也不会接受到该结果通知。</p>

<p>可知，<strong>Activity</strong> 自己调用 <strong>onActivityResult</strong> 方法时传入的 <strong>requestCode</strong> 不能大于 <strong>0xFFFF</strong>，否则会和来自 <strong>Fragment</strong> 的请求 <strong>requestCode</strong> 混淆。</p>
:ET