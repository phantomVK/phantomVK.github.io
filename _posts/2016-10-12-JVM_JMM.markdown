---
layout:     post
title:      "JVM内存模型"
date:       2016-10-12
author:     "phantomVK"
header-img: "img/main_img.jpg"
catalog:    true
tags:
    - Java
---

# 一、JVM内存模型

### 1.1 意义

我们常说的Java内存模型(Java Memory Model, JMM)指的是Java运行时(Java runtime)内存模型。Java源码首先编译成字节码，由虚拟机读取运行。字节码是静态代码，需要加载到内存才能成为可以动态运行的对象。

虽然Java虚拟机自动内存管理为Java开发者节省很多开发时间，不需要为内存管理编写冗余易错的代码。但要是对JVM的内存模型和内存回收机制不熟悉，还是会在不经意间造成内存泄漏。这是我们必须了解JMM的理由：

* 有限内存中完成更多工作
* 避免内存泄漏或内存溢出
* 根据内存模型编写性能更佳的代码
* 虚拟机内存调优

### 1.2 分类及简介

运行时内存数据区大体上被分为5个区域、两种类型

5个数据区包括：`方法区`、`堆区`、`虚拟机栈`、`本地方法栈`、`程序计数器`	
![img](/img/jvm_memory/runtime_mem.png)
	
两种类型:

* 线程共享数据区：
  1. **方法区**: 存储已被虚拟机加载的类信息、常量、静态变量、即时编译后代码等数据。常量池位于方法区，并使用永久代来实现方法区的GC
  2. **堆区**: 用于存放对象实例和数组


* 线程私有数据区：
  1. **虚拟机栈**: 方法执行时创建一个栈帧，用于存储局部变量、操作数栈、动态链接、方法出口等消息
  2. **本地方法栈**: 用于存放执行Native方法运行数据
  3. **程序计数器**: 当前线程所执行字节码指示器，改变计数器指向选取下一条字节码指令

# 二、具体介绍

### 2.1 程序计数器

程序计数器可看做当前线程所执行字节码行号的指针，每个线程都有一个独立的程序计数器，各个线程之间计数器互不影响。如果当前线程执行的是Native方法，则计数器为空。执行Java方法时，这个计数器记录执行字节码指令地址。

### 2.2 虚拟机栈

虚拟机栈线程私有，生命周期与线程生命周期相同。方法开始执行时创建一个栈帧放入虚拟机栈中，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。

![img](/img/jvm_memory/vmstack.png)

方法执行完毕栈帧出栈并销毁，虚拟机继续执行虚拟机栈顶的栈帧。

### 2.3 本地方法栈

虚拟机执行Native方法时使用，不同的虚拟机有不同的实现方法。HotSpot虚拟机的本地方法栈和虚拟机栈合二为一。

### 2.4 Java堆区

堆区是开发过程中接触次数最多，也是我们最关注的内存区域。该区域被所有线程共享，所有创建的对象都在这个区域分配内存并初始化。堆区中内存分配和回收要消耗非常多的处理器资源。相比之下，栈则更容易管理且轻巧，所有内存都在进出栈过程中自然而然地完成申请和释放。

有些在堆区保存的对象通过一定的技术手段，可以转换在栈中完成生命周期，把本来存放在堆内存的数据分配到栈中。数据的生命周期随着入栈和出栈而完成管理，不需要像堆内存一样进行繁杂的回收操作，减轻堆内存的压力。

![img](/img/jvm_memory/heap.png)

大部分对象生命周期很短，熬不过第一次经历的垃圾收集。堆区分代回收就是根据不同对象的生命周期，做出合理的内存分配和回收操作。

从分配的角度来看，线程本地缓冲区(Thread local allocation buffer, TLAB)有利于更高效地划分线程私有的缓冲区。

新创建的对象一般先存放在Eden区，经过垃圾回收且存活的对象会进入两个Survivor中的一个。此时这个Survivor区就称为To Survivor，而另一个区称为From Survivor。From Survivor会把上次回收存活的对象移到To Survivor，然后清空。

![img](/img/jvm_memory/from_to_sur.png)

From Survivor和To Survivor名字是相对的。对象移出的Survivor区称为From Survivor，对象存入的区域称为To Survivor。大多数时间两个区有一个是占用，另一个已经清空等待使用。

在Survivor区的对象会在两区之间来回经历GC。经过多次垃圾回收依然存活的对象，表明此对象比较稳定，达到GC年龄后就会被移到老年代，此后在老年代中经历垃圾回收的频率将大大降低。

如果一个新对象体积太大，以至于新生代经过一次垃圾回收后依然没有足够空间存放它。JVM会通过分配担保的方式把这个对象放在老年代。如果老年代经过一次Full GC依然没有空间，虚拟机无法为这个对象提供内存空间，只能抛出OOM异常停止运行。

### 2.5 方法区

用于存放虚拟机加载的信息、常量、静态变量、即时编译器编译后的代码等数据。由于永久代存储的数据生命周期非常长，GC在这个区域消耗时间长且回收效果差，所以方法区GC频率很低。

不同回收策略对方法区的处理：

* G1：只有在Full GC的时候方法区才会被清理。当方法区需要空间时，该空间无法扩展又没有内存空间可以回收，就会抛出OutOfMemory异常。

* CMS：可以使用 -XX:+CMSClassUnloadingEnabled 参数，在CMS并行收集阶段回收PermGen空间。

### 2.6 常量池

又称运行时常量池，是方法区的一部分，使用空间受到方法区大小的限制，用于存放编译器生成的各种字面量和符号引用。此外，运行期间新的常量也会放入常量池中，常见运行时常量池添加是通过String类的intern()方法。

1. 字面量：如文本字符串、final常量值
2. 符号引用：编译语言层面的概念，包括以下3类： 
 * 字段的名称和描述符
 * 方法的名称和描述符
 * 类和接口的全限定名

### 2.7 直接内存

直接内存不属于虚拟机运行时内存，该空间划分在虚拟机外，性能比较好，大小不受堆内存容量限制。

不过，直接内存会受到物理机剩余可用内存、处理器寻址空间的限制。如果虚拟机堆内存分配太大，可能会导致剩余直接内存空间不足而出现运行时异常。

# 三、最新变化

### 3.1 元数据区

由于PermGen内存管理的效果远没有达到预期，所以JCP已经着手去除PermGen的工作。自JDK7，字符串常量已经从永久代移除。在JDK8中，PermGen被彻底移除，取而代之的是metaspace数据区。

元数据区使用Native内存，申请和释放由虚拟机负责管理。失效参数`-XX:PermSize`和`-XX:MaxPermSize`会被忽略并提出警告。Metaspace通过参数`-XX:MetaspaceSize`和`-XX:MaxMetaspaceSize`设定。

在JDK8u102中开启Android Studio后，在jvisualvm中只看见Metaspace而没有PermGen。

![img](/img/jvm_memory/metaspace.jpg)

### 3.2 G1内存模型

G1回收机制发展到JDK8已基本成型。G1应该是唯一一个能完成新生代到老年代所有管理的GC实现。之前的技术如上一节提到的CMS和PerNew需要互相配合才能完成回收工作。

基于G1回收的特殊性，G1的内存模型和上面介绍的内存模型是有差别的。也就是说，上面的内存模型对G1是无效的。由于现在没有太多的资料可以参考G1的内存模型。如果没有特殊需求，现时CMS和PerNew已经很好地适应大部分应用场景。

G1学习资料:

* [Java Hotspot G1 GC的一些关键技术](https://zhuanlan.zhihu.com/p/22591838)
* [About G1 Garbage Collector, Permanent Generation and Metaspace](https://blogs.oracle.com/poonam/entry/about_g1_garbage_collector_permanent)

