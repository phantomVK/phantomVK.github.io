I"M<p>虽然 <strong>ViewStub</strong> 父类是 <strong>View</strong>，但其本质是 <strong>不可见</strong>、<strong>无尺寸</strong>、<strong>懒加载</strong> 的布局填充工具，自身没有尺寸和绘图逻辑，不能展示在界面上。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ViewStub</span> <span class="kd">extends</span> <span class="nc">View</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>当 <strong>ViewStub</strong> 被设置为可见或调用 <strong>inflate()</strong> 时进行布局填充。填充过程 <strong>ViewStub</strong> 从所在父布局中移除，并把懒加载填充的布局添加到相应位置，新填充布局沿用预设给 <strong>ViewStub</strong> 的 <strong>LayoutParams</strong>。</p>

<p>类注释提供以下示例：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;ViewStub</span> <span class="na">android:id=</span><span class="s">"@+id/stub"</span>
      <span class="na">android:inflatedId=</span><span class="s">"@+id/subTree"</span>
      <span class="na">android:layout=</span><span class="s">"@layout/mySubTree"</span>
      <span class="na">android:layout_width=</span><span class="s">"120dip"</span>
      <span class="na">android:layout_height=</span><span class="s">"40dip"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>示例定义 <strong>ViewStub</strong> 的id为 <strong>R.id.stub</strong>，填充布局资源为 <strong>R.layout.mySubTree</strong>，并指定 <strong>R.id.subTree</strong> 为新视图id，这样就能用这个id引用填充后的视图。由于 <strong>ViewStub</strong> 加载布局后就被移除，所以再次调用并填充布局会出现异常。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// 填充之后给新视图设置的id</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">mInflatedId</span><span class="o">;</span>
<span class="c1">// 需要填充布局的id</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">mLayoutResource</span><span class="o">;</span>

<span class="kd">private</span> <span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span> <span class="n">mInflatedViewRef</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>有多个重载构造方法，但最终都会来到这里：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">ViewStub</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleRes</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>

    <span class="c1">// 从xml获取参数值</span>
    <span class="kd">final</span> <span class="nc">TypedArray</span> <span class="n">a</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="n">attrs</span><span class="o">,</span>
            <span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">ViewStub</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">,</span> <span class="n">defStyleRes</span><span class="o">);</span>
    <span class="c1">// 获取填充之后要给新视图设置的id</span>
    <span class="n">mInflatedId</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getResourceId</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">ViewStub_inflatedId</span><span class="o">,</span> <span class="no">NO_ID</span><span class="o">);</span>
    <span class="c1">// 获取需要填充布局的id</span>
    <span class="n">mLayoutResource</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getResourceId</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">ViewStub_layout</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="n">mID</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getResourceId</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">ViewStub_id</span><span class="o">,</span> <span class="no">NO_ID</span><span class="o">);</span>
    <span class="n">a</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>

    <span class="c1">// 因为ViewStub不具备UI功能，所以要设置为不可见</span>
    <span class="n">setVisibility</span><span class="o">(</span><span class="no">GONE</span><span class="o">);</span>
    <span class="c1">// 没有UI也不需要绘制</span>
    <span class="n">setWillNotDraw</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>调用以下方法就能懒加载布局，和调用 <strong>ViewStub</strong> 的 <strong>setVisibility()</strong> 的作用一样。</p>

<p>填充时检查父布局合法性，若父布局为空存在两种情况：</p>

<ul>
  <li><strong>ViewStub</strong> 通过代码构建，但没添加到父布局中；</li>
  <li>该 <strong>ViewStub</strong> 曾加载过，已失效并从父布局移除；</li>
</ul>

<p>这两种情况都不允许 <strong>ViewStub</strong> 再次填充，所以要抛出异常。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">View</span> <span class="nf">inflate</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 获取ViewStub所在父布局</span>
    <span class="kd">final</span> <span class="nc">ViewParent</span> <span class="n">viewParent</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">();</span>

    <span class="c1">// 检查父布局不为空且必须为ViewGroup，只有ViewGroup才能存放子视图</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">viewParent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">viewParent</span> <span class="k">instanceof</span> <span class="nc">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 检查是否指定要加载布局的资源id</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mLayoutResource</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="nc">ViewGroup</span> <span class="n">parent</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ViewGroup</span><span class="o">)</span> <span class="n">viewParent</span><span class="o">;</span>
            <span class="c1">// 填充需要懒加载的视图</span>
            <span class="kd">final</span> <span class="nc">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">inflateViewNoAdd</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
            <span class="c1">// 替换视图</span>
            <span class="n">replaceSelfWithView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">parent</span><span class="o">);</span>

            <span class="n">mInflatedViewRef</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">view</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">mInflateListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">mInflateListener</span><span class="o">.</span><span class="na">onInflate</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">view</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"ViewStub must have a valid layoutResource"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"ViewStub must have a non-null ViewGroup viewParent"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>懒加载视图经过 <a href="/2018/03/03/LayoutInflater/#六视图创建">LayoutInflater</a> 填充为实例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="nc">View</span> <span class="nf">inflateViewNoAdd</span><span class="o">(</span><span class="nc">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">LayoutInflater</span> <span class="n">factory</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mInflater</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">factory</span> <span class="o">=</span> <span class="n">mInflater</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">factory</span> <span class="o">=</span> <span class="nc">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">final</span> <span class="nc">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">mLayoutResource</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>

    <span class="c1">// 如果额外指定id，就把指定的id设置给新视图</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mInflatedId</span> <span class="o">!=</span> <span class="no">NO_ID</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">view</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">mInflatedId</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>获得填充后的布局实例，还要处理 <strong>ViewStub</strong> 本身，前后共四个步骤：</p>

<ul>
  <li>获取 <strong>ViewStub</strong> 在父布局的位置索引；</li>
  <li><strong>ViewStub</strong> 从所在父布局中移除；</li>
  <li>把 <strong>ViewStub</strong> 的 <strong>LayoutParams</strong> 提供给新视图；</li>
  <li>新视图放在父布局 <strong>ViewStub</strong> 原位置，即第一步获取的索引索引；</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">replaceSelfWithView</span><span class="o">(</span><span class="nc">View</span> <span class="n">view</span><span class="o">,</span> <span class="nc">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 获取ViewStub在父布局的位置</span>
    <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">indexOfChild</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

    <span class="c1">// ViewStub从所在父布局中移除，结束占位</span>
    <span class="n">parent</span><span class="o">.</span><span class="na">removeViewInLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

    <span class="c1">// 把ViewStub的LayoutParams提供给新视图</span>
    <span class="kd">final</span> <span class="nc">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">layoutParams</span> <span class="o">=</span> <span class="n">getLayoutParams</span><span class="o">();</span>

    <span class="c1">// 新视图放在父布局ViewStub原来的位置</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">layoutParams</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">parent</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span> <span class="n">layoutParams</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">parent</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>在 <strong>LayoutInflater</strong> 实现里面，遇到 <strong>ViewStub</strong> 只是创建新实例，然后把当前使用的 <strong>LayoutInflater</strong> 实例提供给 <strong>ViewStub</strong>，以后加载视图时使用该 <strong>LayoutInflater</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">// 创建类实例，args是自定义主题相关变量</span>
<span class="kd">final</span> <span class="nc">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>

<span class="c1">// 类型是ViewStub</span>
<span class="k">if</span> <span class="o">(</span><span class="n">view</span> <span class="k">instanceof</span> <span class="nc">ViewStub</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 使用相同Context给ViewStub设置LayoutInflater</span>
    <span class="kd">final</span> <span class="nc">ViewStub</span> <span class="n">viewStub</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ViewStub</span><span class="o">)</span> <span class="n">view</span><span class="o">;</span>
    <span class="n">viewStub</span><span class="o">.</span><span class="na">setLayoutInflater</span><span class="o">(</span><span class="n">cloneInContext</span><span class="o">((</span><span class="nc">Context</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
<span class="o">}</span>
<span class="n">mConstructorArgs</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">lastContext</span><span class="o">;</span>
<span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>通过以下代码检查 <strong>ViewStub</strong> 是否已加载布局：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">if</span> <span class="o">(</span><span class="n">mViewStub</span><span class="o">.</span><span class="na">getParent</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">mViewStub</span><span class="o">.</span><span class="na">inflate</span><span class="o">();</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">mViewStub</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="nc">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>参考链接：</p>

<ul>
  <li>https://stackoverflow.com/questions/23783101/how-to-check-if-a-viewstub-is-already-inflated</li>
</ul>
:ET