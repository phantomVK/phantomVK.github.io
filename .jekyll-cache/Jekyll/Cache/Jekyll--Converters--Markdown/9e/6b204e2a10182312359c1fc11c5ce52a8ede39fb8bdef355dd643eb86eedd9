I"e<h2 id="一默认配置">一、默认配置</h2>

<p><code class="highlighter-rouge">android</code>域 <code class="highlighter-rouge">defaultConfig</code> 包含应用默认包名、最低SDK版本、目标SDK版本、应用版本序号和应用版本代号。如果其他地方配置相同参数，新的参数会覆盖默认参数。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="n">android</span> <span class="o">{</span>
    <span class="n">compileSdkVersion</span> <span class="mi">25</span>
    <span class="n">buildToolsVersion</span> <span class="s2">"25.0.2"</span>
    <span class="n">defaultConfig</span> <span class="o">{</span>
        <span class="n">applicationId</span> <span class="s2">"com.phantomvk.app"</span>
        <span class="n">minSdkVersion</span> <span class="mi">16</span>
        <span class="n">targetSdkVersion</span> <span class="mi">25</span>
        <span class="n">versionCode</span> <span class="mi">1</span>
        <span class="n">versionName</span> <span class="s2">"1.0"</span>
    <span class="o">}</span>
    <span class="n">buildTypes</span> <span class="o">{</span>
        <span class="n">release</span> <span class="o">{</span>
            <span class="n">minifyEnabled</span> <span class="kc">false</span>
            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">'proguard-android.txt'</span><span class="o">),</span> <span class="s1">'proguard-rules.pro'</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="highlighter-rouge">defaultConfig</code>定义的变量在所有子域中生效</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">defaultConfig</span> <span class="o">{</span>
    <span class="n">applicationId</span> <span class="s2">"com.phantomvk.app"</span>
    <span class="n">minSdkVersion</span> <span class="mi">16</span>
    <span class="n">targetSdkVersion</span> <span class="mi">25</span>
    <span class="n">versionCode</span> <span class="mi">1</span>
    <span class="n">versionName</span> <span class="s2">"1.0"</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"BUG_REPORT_URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\report\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="二构建类型">二、构建类型</h2>

<p><code class="highlighter-rouge">buildType</code>构建类型默认为<code class="highlighter-rouge">debug</code>模式，同时支持<code class="highlighter-rouge">release</code>模式。</p>

<p>由于<code class="highlighter-rouge">debug</code>模式很少甚至不需要配置参数，所以<code class="highlighter-rouge">debug</code>配置项默认不显示出来的，需要定制的话可以手动添加。<code class="highlighter-rouge">release</code>可以开启代码混淆和资源压缩的支持，需要在<code class="highlighter-rouge">proguard-android.txt</code>里编写规则。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="n">buildTypes</span> <span class="o">{</span>
    <span class="n">debug</span> <span class="o">{</span>
        <span class="n">minifyEnabled</span> <span class="kc">false</span>
    <span class="o">}</span>
    <span class="n">release</span> <span class="o">{</span>
        <span class="n">minifyEnabled</span> <span class="kc">true</span>
        <span class="n">shrinkResources</span> <span class="kc">true</span>
        <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">'proguard-android.txt'</span><span class="o">),</span> <span class="s1">'proguard-rules.pro'</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="三渠道配置">三、渠道配置</h2>

<h3 id="31-设置不同渠道">3.1 设置不同渠道</h3>

<p><code class="highlighter-rouge">productFlavors</code>里可自定义应用不同版本，如免费版和收费版，内部版和公开版。不同版本可以利用静态变量使用各自定义值。</p>

<p><code class="highlighter-rouge">buildConfigField</code>定义值经过编译后可以在Java代码中访问<code class="highlighter-rouge">BuildConfig</code>类获得。</p>

<p>下面的示例为内部版和外部版<code class="highlighter-rouge">buildConfigField</code>分别设置相同<code class="highlighter-rouge">URL</code>字符串类型变量名，但对应不同变量值。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="n">productFlavors</span> <span class="o">{</span>
    <span class="n">internal</span> <span class="o">{</span>
        <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"Internal\""</span>
        <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://api.phantomvk.com\int\""</span>
    <span class="o">}</span>
    <span class="n">external</span> <span class="o">{</span>
        <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"External\""</span>
        <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://api.phantomvk.com\ext\""</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="32-渠道包名">3.2 渠道包名</h3>

<p>如果在渠道中定义了<code class="highlighter-rouge">applicationId</code>，这个值会覆盖<code class="highlighter-rouge">defaultConfig</code>里面的<code class="highlighter-rouge">applicationId</code>，同时修改<code class="highlighter-rouge">androidManifest</code>中<code class="highlighter-rouge">package</code>的项目包名。大家可以自己尝试定义一下，然后解apk看<code class="highlighter-rouge">androidManifest</code>的内容。</p>

<p>一个名为<code class="highlighter-rouge">internal</code>的渠道版本</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">internal</span> <span class="o">{</span>
    <span class="n">applicationId</span> <span class="s2">"com.phantomvk.app.internal"</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"Internal\""</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\int\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>同理<code class="highlighter-rouge">external</code></p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">external</span> <span class="o">{</span>
    <span class="n">applicationId</span> <span class="s2">"com.phantomvk.app.external"</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"External\""</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\ext\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如果不想在<code class="highlighter-rouge">applicationId</code>重复长字符串，可以使用<code class="highlighter-rouge">applicationIdSuffix</code>实现。构建时会把拼接<code class="highlighter-rouge">defaultConfig.applicationId</code>和<code class="highlighter-rouge">applicationIdSuffix</code>的结果作为新包名，取代默认的<code class="highlighter-rouge">defaultConfig.applicationId</code>。</p>

<p>如下<code class="highlighter-rouge">applicationIdSuffix</code>的结果是<code class="highlighter-rouge">com.phantomvk.app.internal</code></p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">internal</span> <span class="o">{</span>
    <span class="n">applicationIdSuffix</span> <span class="s2">".internal"</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"Internal\""</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\int\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="highlighter-rouge">applicationId</code>和<code class="highlighter-rouge">applicationIdSuffix</code>各有优缺点：</p>

<ul>
  <li><code class="highlighter-rouge">applicationIdSuffix</code>长度短，易于阅读，作为后缀添加；</li>
  <li><code class="highlighter-rouge">applicationId</code>可指定其他和本工程完全不同的包名，如<code class="highlighter-rouge">com.pvk.app.internal</code>；但管理多个互相没有任何关联的包名容易引起混乱</li>
</ul>

<p>下面使用<code class="highlighter-rouge">applicationId</code>定义一个新的渠道包名</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">internal</span> <span class="o">{</span>
    <span class="n">applicationId</span> <span class="s2">"com.pvk.app.internal"</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"Internal\""</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\int\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="33-资源配置">3.3 资源配置</h3>

<p><code class="highlighter-rouge">resValue</code>可以在<code class="highlighter-rouge">res/values</code>的子文件中访问。</p>

<p>如自定义不同渠道的App名：先删除<code class="highlighter-rouge">res/values/string.xml</code>中<code class="highlighter-rouge">app_name</code>，然后定义一个名为<code class="highlighter-rouge">app_name</code>的<code class="highlighter-rouge">resValue</code>变量。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">internal</span> <span class="o">{</span>
    <span class="n">applicationId</span> <span class="s2">"com.pvk.app.internal"</span>
    <span class="n">resValue</span> <span class="s2">"string"</span><span class="o">,</span> <span class="s2">"AppName"</span><span class="o">,</span> <span class="s2">"PhantomvkInt"</span>
    <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">app_key:</span> <span class="s2">"phantomvk"</span><span class="o">]</span>
    <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">app_secret:</span> <span class="s2">"jnce3r93n"</span><span class="o">]</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"TYPE"</span><span class="o">,</span> <span class="s2">"\"Internal\""</span>
    <span class="n">buildConfigField</span> <span class="s2">"String"</span><span class="o">,</span> <span class="s2">"URL"</span><span class="o">,</span> <span class="s2">"\"https://phantomvk.com\api\int\""</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>而<code class="highlighter-rouge">manifestPlaceholders</code>定义的键值对可以在<code class="highlighter-rouge">AndroidManifest.xml</code>里读取</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"app_key"</span> <span class="na">android:value=</span><span class="s">"${app_key}"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"app_secret"</span> <span class="na">android:value=</span><span class="s">"${app_secret}"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="34-安装包重命名">3.4 安装包重命名</h3>

<p>Android Studio默认App安装包名字如下，相比网上发布的应用，缺少应用名、应用版本号等字段。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>app-external-debug.apk
app-external-release-unsigned.apk
app-internal-debug.apk
app-internal-release-unsigned.apk
</pre></td></tr></tbody></table></code></pre></div></div>

<p>打包过程中可以执行命名规则，对每个成功编译的安装包重命名为合适的名字</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="n">applicationVariants</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
    <span class="n">variant</span><span class="o">.</span><span class="na">outputs</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">output</span> <span class="o">-&gt;</span>
        <span class="kt">def</span> <span class="n">apkName</span> <span class="o">=</span> <span class="s2">"Phantom_"</span> <span class="o">+</span> <span class="s2">"v${defaultConfig.versionName}_"</span> <span class="o">+</span> <span class="n">variant</span><span class="o">.</span><span class="na">productFlavors</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">name</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">variant</span><span class="o">.</span><span class="na">buildType</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="o">(</span><span class="s1">'release'</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">apkName</span> <span class="o">+=</span> <span class="s1">'.apk'</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">variant</span><span class="o">.</span><span class="na">buildType</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="o">(</span><span class="s1">'debug'</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">apkName</span> <span class="o">+=</span> <span class="s1">'_debug.apk'</span>
        <span class="o">}</span>
        <span class="n">output</span><span class="o">.</span><span class="na">outputFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">outputFile</span><span class="o">.</span><span class="na">parent</span><span class="o">,</span> <span class="n">apkName</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上面的规则产生以下的安装包名。相比默认名字，易读且信息量更多。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Phantom_v1.0_external_debug.apk
Phantom_v1.0_external.apk
Phantom_v1.0_internal_debug.apk
Phantom_v1.0_internal.apk
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="四全局配置">四、全局配置</h2>

<h3 id="41-项目全局变量">4.1 项目全局变量</h3>

<p>为了统一项目所有的版本代号，先在<code class="highlighter-rouge">Project</code>的<code class="highlighter-rouge">build.gradle</code>中设置全局变量</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">ext</span> <span class="o">{</span>
    <span class="n">versionCodeProp</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">versionNameProp</span> <span class="o">=</span> <span class="s2">"1.0"</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>在各个<code class="highlighter-rouge">Module</code>下的<code class="highlighter-rouge">build.gradle</code>可以用以下的方式引用</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">versionCode</span> <span class="n">rootProject</span><span class="o">.</span><span class="na">ext</span><span class="o">.</span><span class="na">versionCodeProp</span>
<span class="n">versionName</span> <span class="n">rootProject</span><span class="o">.</span><span class="na">ext</span><span class="o">.</span><span class="na">versionNameProp</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="42-分包名安装报错">4.2 分包名安装报错</h3>

<p>我曾经遇到在Gradle中渠道正确分包名，但在同一台手机里安装不同渠道应用会失败的问题。现象是既不能覆盖前一个渠道应用，又不能安装为一个新的应用，仅报错：<code class="highlighter-rouge">无法完成安装</code></p>

<p>这个问题的原因是<code class="highlighter-rouge">AndroidManifest</code>里<code class="highlighter-rouge">ContentProvider</code>声明组件时使用了相同授权名。因此多个<code class="highlighter-rouge">ContentProvider</code>是不能同时安装的，不然手机会不知道应该提供哪个<code class="highlighter-rouge">ContentProvider</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;provider</span>
    <span class="na">android:name=</span><span class="s">".data.ContentProvider"</span>
    <span class="na">android:authorities=</span><span class="s">"com.phantomvk.app.provider"</span>
    <span class="na">android:exported=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我定义的是<code class="highlighter-rouge">applicationId</code>绝对包名，所以用如下方法解决问题</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;provider</span>
    <span class="na">android:name=</span><span class="s">".data.ContentProvider"</span>
    <span class="na">android:authorities=</span><span class="s">"${applicationId}.provider"</span>
    <span class="na">android:exported=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="五编译检查">五、编译检查</h2>

<h3 id="51-添加lintoptions">5.1 添加lintOptions</h3>

<p>命令行执行gradle编译会执行lint检查，并在遇到<code class="highlighter-rouge">error</code>时强制退出。不幸的是，这个错误可能是第三方jar包或aar导致的，我们无法改正。</p>

<p>如果这些<code class="highlighter-rouge">error</code>不会导致应用运行时奔溃或抛异常，用<code class="highlighter-rouge">abortOnError false</code>忽略所有<code class="highlighter-rouge">error</code>继续编译。不放心的可以用 Analyze &gt; Inspect Code 检查应用中存在的<code class="highlighter-rouge">warning</code>和<code class="highlighter-rouge">error</code>，修正的错误。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">lintOptions</span> <span class="o">{</span>
    <span class="n">disable</span> <span class="s1">'InvalidPackage'</span>
    <span class="n">abortOnError</span> <span class="kc">false</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="52-packagingoptions">5.2 packagingOptions</h3>

<p>多个包中存在相同的文件，在编译合并也可能会报错。因不关系到运行代码，直接排除在打包外即可。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">packagingOptions</span> <span class="o">{</span>
    <span class="n">exclude</span> <span class="s1">'META-INF/NOTICE'</span>
    <span class="n">exclude</span> <span class="s1">'META-INF/NOTICE.txt'</span>
    <span class="n">exclude</span> <span class="s1">'META-INF/LICENSE'</span>
    <span class="n">exclude</span> <span class="s1">'META-INF/LICENSE.txt'</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="六构建命令">六、构建命令</h2>

<p>已经构建好<code class="highlighter-rouge">Gradle</code>的环境可使用<code class="highlighter-rouge">gradle</code>命令完成构建工作。如果没有搭建环境，也可以用项目目录下的<code class="highlighter-rouge">gradlew</code>或<code class="highlighter-rouge">gradlew.bat</code>临时构建。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c"># 构建所有版本</span>
<span class="o">&gt;</span> gradle build

<span class="c"># 按照debug或release构建</span>
<span class="o">&gt;</span> gradle assembleDebug
<span class="o">&gt;</span> gradle assembleRelease

<span class="c"># 按照自定义渠道构建</span>
<span class="o">&gt;</span> gradle assembleInternal
<span class="o">&gt;</span> gradle assembleExternal

<span class="c"># 构建指定渠道debug版本</span>
<span class="o">&gt;</span> gradle assembleInternalDebug
<span class="o">&gt;</span> gradle assembleInternalRelease
</pre></td></tr></tbody></table></code></pre></div></div>

:ET